#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СпособыПолученияРазмераТаблицБазыДаных = СпособыПолученияРазмераТаблицБазыДаных();

	Элементы.СпособОпределенияРазмераТаблицы.СписокВыбора.Очистить();

	ДоступныеСпособы = ДоступныеСпособыПолученияРазмераБазыДанных(СпособыПолученияРазмераТаблицБазыДаных);

	Для Каждого ТекСпособ Из ДоступныеСпособы Цикл

		Элементы.СпособОпределенияРазмераТаблицы.СписокВыбора.Добавить(ТекСпособ.Имя, ТекСпособ.Представление);
	КонецЦикла;

	СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.Нет.Имя;
	ПриИзмененииСпособаОпределенияРазмераТаблицНаСервере();

	ЕдиницыИзмеренияРазмераТаблиц = ЕдиницыИзмеренияРазмераТаблиц();
	Элементы.ЕдиницаИзмеренияРазмераТаблиц.СписокВыбора.Очистить();
	Для Каждого КлючЗначение Из ЕдиницыИзмеренияРазмераТаблиц Цикл
		Элементы.ЕдиницаИзмеренияРазмераТаблиц.СписокВыбора.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	ЕдиницаИзмеренияРазмераТаблиц = ЕдиницыИзмеренияРазмераТаблиц.КБ;
	УстановитьЗаголовкиКолонокРазмераТаблиц();

	АдресСтруктурыБазы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаполнитьСтруктуруХраненияБазы();
	УИ_ОбщегоНазначения.ФормаИнструментаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		Элементы.ПутьКУтилитеSQLPSQL.ПодсказкаВвода = "psql.exe";
		Элементы.ПутьКУтилитеSQLSQLCMD.ПодсказкаВвода = "sqlcmd.exe";
	Иначе
		Элементы.ПутьКУтилитеSQLPSQL.ПодсказкаВвода = "psql";
		Элементы.ПутьКУтилитеSQLSQLCMD.ПодсказкаВвода = "sqlcmd";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПриИзмененииСпособаОпределенияРазмераТаблицНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИскатьВИменахПолейПриИзменении(Элемент)
	ЗаполнитьТаблицуРезультатаСУчетомФИльтров();
КонецПроцедуры

&НаКлиенте
Процедура ТочноеСоответствиеПриИзменении(Элемент)
	ЗаполнитьТаблицуРезультатаСУчетомФИльтров();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	ЗаполнитьТаблицуРезультатаСУчетомФИльтров();
КонецПроцедуры
&НаКлиенте
Процедура СпособОпределенияРазмераТаблицыПриИзменении(Элемент)
	ПриИзмененииСпособаОпределенияРазмераТаблицНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияРазмераТаблицПриИзменении(Элемент)
	УстановитьЗаголовкиКолонокРазмераТаблиц();
	ВывестиРазмерыТаблицВТаблицуРезультата();
КонецПроцедуры
&НаКлиенте
Процедура ПутьКУтилитеSQLSQLCMDНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКУтилитеSQLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКУтилитеSQLPSQLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПутьКУтилитеSQLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры
#КонецОбласти

//#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>
//
//// Код процедур и функций
//
//#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОбновитьРазмерТаблицБазыДанных(Команда)
	ЗаполнитьТаблицуРазмеровТаблицБазы();
КонецПроцедуры
&НаКлиенте
Процедура УстановитьОтбор(Команда)

	ЗаполнитьТаблицуРезультатаСУчетомФИльтров();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьОбщуюКомандуИнструментов(Команда) Экспорт
	УИ_ОбщегоНазначенияКлиент.Подключаемый_ВыполнитьОбщуюКомандуИнструментов(ЭтотОбъект, Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПутьКУтилитеSQLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ОписаниеФайла = УИ_ОбщегоНазначенияКлиент.ПустаяСтруктураОписанияВыбираемогоФайла();
	ОписаниеФайла.ИмяФайла = ПутьКУтилитеSQL;

	Если УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		УИ_ОбщегоНазначенияКлиент.ДобавитьФорматВОписаниеФайлаСохранения(ОписаниеФайла,
																		 "Исполняемый файл утилиты (*.exe)",
																		 "exe",
																		 "*.exe");
	КонецЕсли;

	УИ_ОбщегоНазначенияКлиент.ПолеФормыИмяФайлаНачалоВыбора(ОписаниеФайла,
															Элемент,
															ДанныеВыбора,
															СтандартнаяОбработка,
															РежимДиалогаВыбораФайла.Открытие,
															Новый ОписаниеОповещения("ПутьКУтилитеSQLНачалоВыбораЗавершение",
		ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ПутьКУтилитеSQLНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПутьКУтилитеSQL = ВыбранныеФайлы[0];
КонецПроцедуры

&НаСервере
Процедура ВывестиРазмерыТаблицВТаблицуРезультата()

	Делитель = 1;
	Если ЕдиницаИзмеренияРазмераТаблиц = ЕдиницыИзмеренияРазмераТаблиц().МБ Тогда
		Делитель = 1024;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Результат Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяТаблицы", НРег(СтрокаТаблицы.ИмяТаблицыХранения));

		СтрокаТаблицы.РазмерДанных = 0;
		СтрокаТаблицы.РазмерИндексов =  0;
		СтрокаТаблицы.Зарезервировано = 0;
		СтрокаТаблицы.Свободно = 0;
		СтрокаТаблицы.КоличествоСтрок = 0;

		НайденныеСтроки = РазмерыТаблицБазы.НайтиСтроки(СтруктураПоиска);
		Для Каждого Стр Из НайденныеСтроки Цикл
			СтрокаТаблицы.РазмерДанных = СтрокаТаблицы.РазмерДанных + Стр.РазмерДанных;
			СтрокаТаблицы.РазмерИндексов = СтрокаТаблицы.РазмерИндексов + Стр.РазмерИндексов;
			СтрокаТаблицы.Зарезервировано = СтрокаТаблицы.Зарезервировано + Стр.Зарезервировано;
			СтрокаТаблицы.Свободно = СтрокаТаблицы.Свободно + Стр.Свободно;
			СтрокаТаблицы.КоличествоСтрок = СтрокаТаблицы.КоличествоСтрок + Стр.КоличествоСтрок;
		КонецЦикла;
		Если Делитель <> 1 Тогда
			СтрокаТаблицы.РазмерДанных = СтрокаТаблицы.РазмерДанных / Делитель;
			СтрокаТаблицы.РазмерИндексов = СтрокаТаблицы.РазмерИндексов / Делитель;
			СтрокаТаблицы.Зарезервировано = СтрокаТаблицы.Зарезервировано / Делитель;
			СтрокаТаблицы.Свободно = СтрокаТаблицы.Свободно / Делитель;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазы()
	Если СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.Платформа.Имя Тогда
		ЗаполнитьТаблицуРазмеровТаблицБазыДанныхПлатформеннымМетодом();
		ВывестиРазмерыТаблицВТаблицуРезультата();
	ИначеЕсли СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.psql.Имя Тогда
		УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(Новый ОписаниеОповещения("ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеПодключенияРасширенияРаботыСФайлами",
			ЭтотОбъект));

	ИначеЕсли СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.sqlcmd.Имя Тогда
		УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(Новый ОписаниеОповещения("ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеПодключенияРасширенияРаботыСФайлами",
			ЭтотОбъект));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыДанныхПлатформеннымМетодом()
	РазмерыТаблицБазы.Очистить();
	СтруктураБазы = ПолучитьИзВременногоХранилища(АдресСтруктурыБазы);

	Для Каждого СтрокаСтруктуры Из СтруктураБазы Цикл
		Если НРег(СтрокаСтруктуры.Назначение) <> "основная" Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаСтруктуры.Метаданные) Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = РазмерыТаблицБазы.Добавить();
		НоваяСтрока.ИмяТаблицы = НРег(СтрокаСтруктуры.ИмяТаблицыХранения);

		МассивИмен = Новый Массив;
		МассивИмен.Добавить(СтрокаСтруктуры.Метаданные);

		Попытка
			//Появилось только в 8.3.15. На старых платформах не будет даже запускаться без такого вызова
			РазмерДанных = УИ_ОбщегоНазначения.ВычислитьВБезопасномРежиме("ПолучитьРазмерДанныхБазыДанных(,Параметры)",
																		  МассивИмен);
		Исключение
			РазмерДанных = 0;
		КонецПопытки;
		НоваяСтрока.РазмерДанных = РазмерДанных / 1024;

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	ФайловыеПеременные = УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	ИмяКаталогаДляЗапроса = УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(ФайловыеПеременные.КаталогВременныхФайлов,
																		   УИ_ОбщегоНазначенияКлиентСервер.СлучайноеИмяФайла());
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ИмяКаталогаДляЗапроса", ИмяКаталогаДляЗапроса);
	Если УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		ДополнительныеПараметрыОповещения.Вставить("КодировкаВспомогательныхФайлов", "windows-1251");
	Иначе
		ДополнительныеПараметрыОповещения.Вставить("КодировкаВспомогательныхФайлов", "utf-8");
	КонецЕсли;

	УИ_ОбщегоНазначенияКлиент.НачатьОбеспечениеКаталога(ИмяКаталогаДляЗапроса,
														Новый ОписаниеОповещения("ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеОбеспеченияКаталога",
		ЭтотОбъект, ДополнительныеПараметрыОповещения));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеОбеспеченияКаталога(Успешно, ДополнительныеПараметры) Экспорт
	Если Не Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.psql.Имя Тогда
		ТекстЗапроса =
		"SELECT
		|tablename AS table_name,
		|pg_class.reltuples as records_count,
		|pg_total_relation_size(schemaname||'.'||tablename) / 1024 AS total_usage_kb,
		|pg_table_size(schemaname||'.'||tablename) / 1024 AS table_usage_kb,
		|pg_indexes_size(schemaname||'.'||tablename) / 1024 as index_usage_kb,
		|0 as table_free_kb
		|FROM pg_catalog.pg_tables, pg_catalog.pg_class
		|where pg_tables.tablename = pg_class.relname  
		|and schemaname = 'public' 
		|ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
		|";

	Иначе
		ТекстЗапроса =
		"CREATE TABLE #t([имя таблицы] varchar(255), [строк] varchar(255), [зарезервировано] varchar(255), [всего данных] varchar(255), [размер индексов] varchar(255), [свободно] varchar(255));
		|INSERT INTO #t
		|exec sp_msforeachtable N'exec sp_spaceused ''?''';
		|SELECT * FROM #t ORDER BY CONVERT(bigint, REPLACE([всего данных], ' KB', '')) DESC;
		|DROP TABLE #t
		|";

	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИмяФайлаЗапроса",
									 УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(ДополнительныеПараметры.ИмяКаталогаДляЗапроса,
																					УИ_ОбщегоНазначенияКлиентСервер.СлучайноеИмяФайла("sql",
																																	  "req")));
	ДополнительныеПараметры.Вставить("ИмяФайлаЛога",
									 УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(ДополнительныеПараметры.ИмяКаталогаДляЗапроса,
																					УИ_ОбщегоНазначенияКлиентСервер.СлучайноеИмяФайла("txt",
																																	  "log")));
	ДополнительныеПараметры.Вставить("ИмяФайлаРезультата",
									 УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(ДополнительныеПараметры.ИмяКаталогаДляЗапроса,
																					УИ_ОбщегоНазначенияКлиентСервер.СлучайноеИмяФайла("csv",
																																	  "res")));
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстЗапроса);
	Текст.НачатьЗапись(Новый ОписаниеОповещения("ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеЗаписиФайлаЗапроса",
		ЭтотОбъект, ДополнительныеПараметры),
					   ДополнительныеПараметры.ИмяФайлаЗапроса,
					   ДополнительныеПараметры.КодировкаВспомогательныхФайлов);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеЗаписиФайлаЗапроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Истина Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать файл с текстом запроса");
		Возврат;
	КонецЕсли;

	Если УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		Если Не ЗначениеЗаполнено(ПутьКУтилитеSQL) Тогда
			ИмяЗапускаемогоФайла = "psql.exe";
		Иначе
			ИмяЗапускаемогоФайла = ПутьКУтилитеSQL;
		КонецЕсли;		
		
		ТекстСкрипта = СтрШаблон("chcp 65001
		|set PGPASSWORD=%7
		|""%1"" --host=%2 --dbname=%3 --username=%4 --csv --file=""%5"" --output=""%6"" --log-file=""%8""",
										ИмяЗапускаемогоФайла,
										СерверSQL,
										БазаДанныхSQL,
										ПользовательSQL,
										ДополнительныеПараметры.ИмяФайлаЗапроса,
										ДополнительныеПараметры.ИмяФайлаРезультата, ПарольSQL,
										ДополнительныеПараметры.ИмяФайлаЛога);

		ДополнительныеПараметры.Вставить("ЗапускаемыйСкрипт",
										 УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(ДополнительныеПараметры.ИмяКаталогаДляЗапроса,
																						УИ_ОбщегоНазначенияКлиентСервер.СлучайноеИмяФайла("bat",
																																		  "run")));
		
		ТекстСкриптаДляЗаписи = Новый ТекстовыйДокумент;
		ТекстСкриптаДляЗаписи.УстановитьТекст(ТекстСкрипта);
		ТекстСкриптаДляЗаписи.НачатьЗапись(Новый ОписаниеОповещения("ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеСохраненияСкриптаЗапуска",
			ЭтотОбъект, ДополнительныеПараметры),
										   ДополнительныеПараметры.ЗапускаемыйСкрипт,
										   ДополнительныеПараметры.КодировкаВспомогательныхФайлов);
	Иначе
		Если Не ЗначениеЗаполнено(ПутьКУтилитеSQL) Тогда
			ИмяЗапускаемогоФайла = "psql";
		Иначе
			ИмяЗапускаемогоФайла = ПутьКУтилитеSQL;
		КонецЕсли;
		
		ТекстСкриптаЗапуска = СтрШаблон("echo ""%7"" | ""%1"" --host=%2 --dbname=%3 --username=%4 --csv --file=""%5"" --output=""%6"" --log-file=""%8""",
										ИмяЗапускаемогоФайла,
										СерверSQL,
										БазаДанныхSQL,
										ПользовательSQL,
										ДополнительныеПараметры.ИмяФайлаЗапроса,
										ДополнительныеПараметры.ИмяФайлаРезультата,
										ПарольSQL,
										ДополнительныеПараметры.ИмяФайлаЛога);

		ДополнительныеПараметры.Вставить("ЗапускаемыйСкрипт", ТекстСкриптаЗапуска);
		ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеСохраненияСкриптаЗапуска(Истина,
																							  ДополнительныеПараметры);
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыЧерезКонсольнуюУтилитуПослеСохраненияСкриптаЗапуска(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Истина Тогда
		ВозвраТ;
	КонецЕсли;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("НачатьЗаполнениеРазмеровТаблицБазыДанныхЧерезPSQLПослеВыполненияКоманды",
		ЭтотОбъект, ДополнительныеПараметры), ДополнительныеПараметры.ЗапускаемыйСкрипт, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеРазмеровТаблицБазыДанныхЧерезPSQLПослеВыполненияКоманды(КодВозврата, ДополнительныеПараметры) Экспорт
	ТекстРезультата = Новый ТекстовыйДокумент();
	
	ДополнительныеПараметры.Вставить("КодВозврата", КодВозврата);
	ДополнительныеПараметры.Вставить("ТекстовыйДокументРезультата", ТекстРезультата);
	
	ИмяФайлаЧтения =  ДополнительныеПараметры.ИмяФайлаРезультата;
	Если КодВозврата <> 0 Тогда
		ИмяФайлаЧтения = ДополнительныеПараметры.ИмяФайлаЛога;
	КонецЕсли;
	
	ТекстРезультата.НачатьЧтение(Новый ОписаниеОповещения("НачатьЗаполнениеРазмеровТаблицБазыДанныхЧерезPSQLПослеЧтенияРезультатаВыполнения",
		ЭтотОбъект, ДополнительныеПараметры), ИмяФайлаЧтения);
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеРазмеровТаблицБазыДанныхЧерезPSQLПослеЧтенияРезультатаВыполнения(ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.КодВозврата <> 0 Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДополнительныеПараметры.ТекстовыйДокументРезультата.ПолучитьТекст());
		РазмерыТаблицБазы.Очистить();
	ИначеЕсли СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.psql.Имя Тогда
		ЗаполнитьТаблицуРазмеровТаблицБазыДанныхИзСтокиРезультатаPSQL(ДополнительныеПараметры.ТекстовыйДокументРезультата);
	ИначеЕсли СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.sqlcmd.Имя Тогда
		
	КонецЕсли;
		
	ВывестиРазмерыТаблицВТаблицуРезультата();
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения(), ДополнительныеПараметры.ИмяКаталогаДляЗапроса);

КонецПроцедуры

// Заполнить таблицу размеров таблиц базы данных из стоки результата PSQL.
// 
// Параметры:
//  ТекстовыйДокументРезультата -ТекстовыйДокумент-Текстовый документ результата
&НаКлиенте
Процедура ЗаполнитьТаблицуРазмеровТаблицБазыДанныхИзСтокиРезультатаPSQL(ТекстовыйДокументРезультата)
	РазмерыТаблицБазы.Очистить();
	
	Если ТекстовыйДокументРезультата.КоличествоСтрок() <=1 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКолонок = СтрРазделить(ТекстовыйДокументРезультата.ПолучитьСтроку(1), ",");
	
	Для НомерСтроки = 2 По ТекстовыйДокументРезультата.КоличествоСтрок() Цикл
		ТекущаяСтрока = ТекстовыйДокументРезультата.ПолучитьСтроку(НомерСтроки);
		
		МассивСтроки = СтрРазделить(ТекущаяСтрока, ",");
		
		ДанныеСтроки = Новый Структура;
		Для ном = 0 По ИменаКолонок.Количество()-1 Цикл
			ДанныеСтроки.Вставить(ИменаКолонок[ном], МассивСтроки[ном]);
		КонецЦикла;

		НоваяСтрока = РазмерыТаблицБазы.Добавить();
		НоваяСтрока.ИмяТаблицы = НРег(ДанныеСтроки.table_name);
		НоваяСтрока.КоличествоСтрок = Макс(УИ_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСтроки.records_count), 0);
		НоваяСтрока.РазмерДанных = УИ_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСтроки.table_usage_kb);
		НоваяСтрока.РазмерИндексов = УИ_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСтроки.index_usage_kb);
		НоваяСтрока.Зарезервировано = УИ_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСтроки.total_usage_kb);
		НоваяСтрока.Свободно = УИ_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеСтроки.table_free_kb);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеРазмеровТаблицБазыДанныхЧерезSQLCMDПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса =
	"CREATE TABLE #t([имя таблицы] varchar(255), [строк] varchar(255), [зарезервировано] varchar(255), [всего данных] varchar(255), [размер индексов] varchar(255), [свободно] varchar(255));
	|INSERT INTO #t
	|exec sp_msforeachtable N'exec sp_spaceused ''?''';
	|SELECT * FROM #t ORDER BY CONVERT(bigint, REPLACE([всего данных], ' KB', '')) DESC;
	|DROP TABLE #t
	|";
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьФайлаСТекстомЗапроса(ТекстЗапроса, ИмяФайлаЗапроса, ОписаниеОповещенияОЗавершении)
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстЗапроса);
	Текст.НачатьЗапись(ОписаниеОповещенияОЗавершении, ИмяФайлаЗапроса, "utf8");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруХраненияБазы()

	СтруктураБазы = ПолучитьИзВременногоХранилища(АдресСтруктурыБазы);

	Если СтруктураБазы = Неопределено Тогда

		СтруктураБазы = ПолучитьСтруктуруХраненияБазыДанных(,Истина);
		ПоместитьВоВременноеХранилище(СтруктураБазы, АдресСтруктурыБазы);

	КонецЕсли;

	ЗаполнитьТаблицуРезультата(СтруктураБазы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРезультата(СтруктураБазы, НайденныеСтроки = Неопределено)
	Результат.Очистить();

	Если НайденныеСтроки = Неопределено Тогда
		СтрокиДляРезультата=СтруктураБазы;
	Иначе
		СтрокиДляРезультата=НайденныеСтроки;
	КонецЕсли;

	ВыводитьРазмеры = СпособОпределенияРазмераТаблиц <> СпособыПолученияРазмераТаблицБазыДаных.Нет.Имя;

	Для Каждого Строка Из СтрокиДляРезультата Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ИмяТаблицы = Строка.ИмяТаблицы;
		НоваяСтрока.Метаданные = Строка.Метаданные;
		НоваяСтрока.Назначение = Строка.Назначение;
		НоваяСтрока.ИмяТаблицыХранения = Строка.ИмяТаблицыХранения;

		Для Каждого Поле Из Строка.Поля Цикл
			НоваяСтрокаПолей = НоваяСтрока.Поля.Добавить();
			НоваяСтрокаПолей.ИмяПоляХранения = Поле.ИмяПоляХранения;
			НоваяСтрокаПолей.ИмяПоля = Поле.ИмяПоля;
			НоваяСтрокаПолей.Метаданные = Поле.Метаданные;
		КонецЦикла;

		Для Каждого Индекс Из Строка.Индексы Цикл
			НоваяСтрокаИндексов = НоваяСтрока.Индексы.Добавить();
			НоваяСтрокаИндексов.ИмяИндексаХранения = Индекс.ИмяИндексаХранения;

			// Поля индекса
			Для Каждого Поле Из Индекс.Поля Цикл
				НоваяСтрокаПолейИндекса = НоваяСтрокаИндексов.ПоляИндекса.Добавить();
				НоваяСтрокаПолейИндекса.ИмяПоляХранения = Поле.ИмяПоляХранения;
				НоваяСтрокаПолейИндекса.ИмяПоля = Поле.ИмяПоля;
				НоваяСтрокаПолейИндекса.Метаданные = Поле.Метаданные;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Если ВыводитьРазмеры Тогда
		ВывестиРазмерыТаблицВТаблицуРезультата();
	КонецЕсли;
	Результат.Сортировать("Метаданные ВОЗР,ИмяТаблицы ВОЗР");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРезультатаСУчетомФИльтров()

	СтруктураБазы = ПолучитьИзВременногоХранилища(АдресСтруктурыБазы);

	ИмяДляПоиска = ВРЕГ(СокрЛП(Отбор));
	Если Не ТочноеСоответствие И Лев(ИмяДляПоиска, 1) = "_" Тогда
		ИмяДляПоиска = Сред(ИмяДляПоиска, 2);
	КонецЕсли;
	НайденныеСтроки = Новый Массив;

	Если ПустаяСтрока(ИмяДляПоиска) Тогда
		ЗаполнитьТаблицуРезультата(СтруктураБазы);
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из СтруктураБазы Цикл

		Если ИскатьВИменахПолей Тогда
			Для Каждого СтрокаПоле Из Строка.Поля Цикл
				Если ТочноеСоответствие Тогда
					Если ВРЕГ(СтрокаПоле.ИмяПоляХранения) = ИмяДляПоиска Или ВРЕГ(СтрокаПоле.ИмяПоля) = ИмяДляПоиска Тогда
						НайденныеСтроки.Добавить(Строка);
					КонецЕсли;
				Иначе

					Если Найти(ВРЕГ(СтрокаПоле.ИмяПоляХранения), ИмяДляПоиска) > 0 Или Найти(ВРЕГ(СтрокаПоле.ИмяПоля),
																							 ИмяДляПоиска) Тогда
						НайденныеСтроки.Добавить(Строка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ТочноеСоответствие Тогда
			Если ВРЕГ(Строка.ИмяТаблицыХранения) = ИмяДляПоиска
				 Или ВРЕГ(Строка.ИмяТаблицы) = ИмяДляПоиска
				 Или ВРЕГ(Строка.Метаданные) = ИмяДляПоиска
				 Или ВРЕГ(Строка.Назначение) = ИмяДляПоиска Тогда
				НайденныеСтроки.Добавить(Строка);
			КонецЕсли;
		Иначе
			Если Найти(ВРЕГ(Строка.ИмяТаблицыХранения), ИмяДляПоиска) > 0
				 Или Найти(ВРЕГ(Строка.ИмяТаблицы), ИмяДляПоиска)
				 Или Найти(ВРЕГ(Строка.Метаданные), ИмяДляПоиска)
				 Или Найти(ВРЕГ(Строка.Назначение), ИмяДляПоиска) Тогда
				НайденныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьТаблицуРезультата(НайденныеСтроки);
КонецПроцедуры

// Способы получения размера таблиц базы даных.
// 
// Возвращаемое значение:
//  Структура - Способы получения размера таблиц базы даных:
// * Нет - Структура - :
// ** Имя - Строка - 
// ** Представление - Строка - 
// * Платформа - Структура - :
// ** Имя - Строка - 
// ** Представление - Строка - 
// * psql - Структура - :
// ** Имя - Строка - 
// ** Представление - Строка - 
// * sqlcmd - Структура - :
// ** Имя - Строка - 
// ** Представление - Строка - 
&НаСервереБезКонтекста
Функция СпособыПолученияРазмераТаблицБазыДаных()
	Способы = Новый Структура;
	Способы.Вставить("Нет", НовыйСпособПолученияРазмераТаблицБазы("Нет", "Не получать размеры таблиц"));
	Способы.Вставить("Платформа", НовыйСпособПолученияРазмераТаблицБазы("Платформа",
																		"Платформенный метод ""ПолучитьРазмерДанныхБазыДанных"""));
	Способы.Вставить("psql", НовыйСпособПолученияРазмераТаблицБазы("psql", "Утилита ""psql"". PostgreSQL"));
	Способы.Вставить("sqlcmd", НовыйСпособПолученияРазмераТаблицБазы("sqlcmd", "Утилита ""sqlcmd"". MSSQL"));

	Возврат Способы;
КонецФункции

// Доступные способы получения размера базы данных.
// 
// Параметры:
//  СпособыПолученияРазмераТаблицБазыДаных- см. СпособыПолученияРазмераТаблицБазыДаных
// 
// Возвращаемое значение:
// Массив из см. НовыйСпособПолученияРазмераТаблицБазы 
&НаСервереБезКонтекста
Функция ДоступныеСпособыПолученияРазмераБазыДанных(СпособыПолученияРазмераТаблицБазыДаных)
	Способы = Новый Массив; //Массив из см. НовыйСпособПолученияРазмераТаблицБазы
	Способы.Добавить(СпособыПолученияРазмераТаблицБазыДаных.Нет);
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше("8.3.15") Тогда
		Способы.Добавить(СпособыПолученияРазмераТаблицБазыДаных.Платформа);
	КонецЕсли;

//	Если Не УИ_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
	Способы.Добавить(СпособыПолученияРазмераТаблицБазыДаных.psql);
	Способы.Добавить(СпособыПолученияРазмераТаблицБазыДаных.sqlcmd);
//	КонецЕсли;

	Возврат Способы;
КонецФункции

&НаСервереБезКонтекста
Функция НовыйСпособПолученияРазмераТаблицБазы(Имя, Представление)
	Способ = Новый Структура;
	Способ.Вставить("Имя", Имя);
	Способ.Вставить("Представление", Представление);

	Возврат Способ;
КонецФункции

&НаСервереБезКонтекста
Функция ЕдиницыИзмеренияРазмераТаблиц()
	Единицы = Новый Структура;
	Единицы.Вставить("КБ", "КБ");
	Единицы.Вставить("МБ", "МБ");

	Возврат Единицы;
КонецФункции

&НаСервере
Процедура ПриИзмененииСпособаОпределенияРазмераТаблицНаСервере()
	РазмерыТаблицБазы.Очистить();

	ЭтоПлатформенныйМетод = СпособОпределенияРазмераТаблиц = СпособыПолученияРазмераТаблицБазыДаных.Платформа.Имя;
	ПолучатьРазмерыТаблиц = СпособОпределенияРазмераТаблиц <> СпособыПолученияРазмераТаблицБазыДаных.Нет.Имя;

	Элементы.РезультатГруппаРазмерыТаблиц.Видимость = ПолучатьРазмерыТаблиц;
	Элементы.РезультатКоличествоСтрок.Видимость = ПолучатьРазмерыТаблиц И Не ЭтоПлатформенныйМетод;
	Элементы.РезультатРазмерИндексов.Видимость = ПолучатьРазмерыТаблиц И Не ЭтоПлатформенныйМетод;
	Элементы.РезультатЗарезервировано.Видимость = ПолучатьРазмерыТаблиц И Не ЭтоПлатформенныйМетод;
	Элементы.РезультатСвободно.Видимость = ПолучатьРазмерыТаблиц И Не ЭтоПлатформенныйМетод;

	Элементы.ГруппаСтраницыНастройкиПолученияРазмеровТаблиц.ТекущаяСтраница = Элементы["ГруппаСтраницаНастройкиПолученияРазмеров"
																					   + СпособОпределенияРазмераТаблиц];

	Элементы.ГруппаРазмерыТаблиц.ЗаголовокСвернутогоОтображения = "Размеры таблиц базы данных: "
																  + СпособыПолученияРазмераТаблицБазыДаных[СпособОпределенияРазмераТаблиц].Представление;
КонецПроцедуры
&НаСервере
Процедура УстановитьЗаголовкиКолонокРазмераТаблиц()
	Элементы.РезультатРазмерДанных.Заголовок = "Данные (" + ЕдиницаИзмеренияРазмераТаблиц + ")";
	Элементы.РезультатРазмерИндексов.Заголовок = "Индексы (" + ЕдиницаИзмеренияРазмераТаблиц + ")";
	Элементы.РезультатЗарезервировано.Заголовок = "Зарезервировано всего (" + ЕдиницаИзмеренияРазмераТаблиц + ")";
	Элементы.РезультатСвободно.Заголовок = "Свободно (" + ЕдиницаИзмеренияРазмераТаблиц + ")";
КонецПроцедуры
#КонецОбласти