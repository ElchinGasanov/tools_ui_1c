#Область ОписаниеПеременных

&НаКлиенте
Перем УИ_ИдентификаторТекущейСтрокиЗапросов; //Число

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НачальныйЗаголовок = Заголовок;

	ИнициализироватьФорму();


	Если Параметры.Свойство("ДанныеОтладки") Тогда
		//@skip-check unknown-form-parameter-access
		ЗаполнитьПоДаннымОтладки(Параметры.ДанныеОтладки);
	КонецЕсли;

	УИ_ОбщегоНазначения.ФормаИнструментаПриСозданииНаСервере(ЭтотОбъект,
															 Отказ,
															 СтандартнаяОбработка,
															 КоманднаяПанель);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЗаголовок();
	УстановитьСтраницуРедактированияЗаголовковЗапроса();

	Если ЗначениеЗаполнено(ИмяФайлаЗапросов) Тогда
		ЗагрузитьФайлКонсоли(Истина);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаголовкиЗапроса

&НаКлиенте
Процедура РедактированиеЗаголовковТаблицейПриИзменении(Элемент)
	УстановитьСтраницуРедактированияЗаголовковЗапроса();
КонецПроцедуры

#КонецОбласти

#Область ПараметрыURLЗапроса


&НаКлиенте
Процедура ПараметрыURLПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;

	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = Элементы.ПараметрыURL.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Использование = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыЗапросаПриИзменении(Элемент)
//	стрПараметры = ПодготовитьСтрокуПараметров();
//	
//	Если Не ПустаяСтрока(стрПараметры) Тогда
//		ПодставитьПараметрыВURL(стрПараметры);
//	КонецЕсли;
	
	//ЗаполнитьСтруктуруJSONВДеревеЗапросов();
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПараметровURLСтрокойПриИзменении(Элемент)
	УстановитьСтраницуРедактированияПараметровURLЗапроса();
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура КодировкаТелаЗапросаПриИзменении(Элемент)
	УстановитьЗаголовкиПоСодержимомуТелаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовТипСтроковогоСодержимогоПриИзменении(Элемент)
	УстановитьЗаголовкиПоСодержимомуТелаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ВидТелаЗапросаПриИзменении(Элемент)
	ПриИзмененииВидаТелаЗапроса();

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаТелаЗапросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаЗапроса = ТекущаяСтрокаЗапросов();	
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДВФ.МножественныйВыбор = Ложь;
	ДВФ.ПолноеИмяФайла = СтрокаЗапроса.ИмяФайлаТела;

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтроки", СтрокаЗапроса.ПолучитьИдентификатор());

	ДВФ.Показать(Новый ОписаниеОповещения("ИмяФайлаТелаЗапросаНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения));
КонецПроцедуры


&НаКлиенте
Процедура URLЗапросаПриИзменении(Элемент)
	//ПрочитатьПараметрыИзURL(URLЗапроса);
	
	//ЗаполнитьСтруктуруJSONВДеревеЗапросов();
КонецПроцедуры


&НаКлиенте
Процедура ЗаголовкиСтрокаПриИзменении(Элемент)
	//ЗаполнитьСтруктуруJSONВДеревеЗапросов();
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗапросовАутентификацияВидПриИзменении(Элемент)
	ПриИзмененииВидаАутентификацииЗапроса();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияАктивизацииСтрокиДереваЗапросов", 0.1, Истина);
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗапросовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСтрокуДереваЗапросов(ТекДанные, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;	
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Имя) Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗаголовковЗапроса


&НаКлиенте
Процедура ТаблицаЗаголовковЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ТаблицаЗаголовковЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаголовковЗапросаПриИзменении(Элемент)
	//ЗаполнитьСтруктуруJSONВДеревеЗапросов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаголовковЗапросаКлючАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыбора = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из СписокИспользованныхЗаголовков Цикл
		Если СтрНайти(НРег(ЭлементСписка.Значение), НРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗапросовТелоМультипарт
&НаКлиенте
Процедура ДеревоЗапросовТелоМультипартПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоЗапросовТелоМультипарт.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные.Использование = Истина;
	ТекДанные.Вид = ВидыЭлементовМультипарт().Файл;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовТелоМультипартЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ДеревоЗапросовТелоМультипарт.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Виды = ВидыЭлементовМультипарт();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиЗапросов", УИ_ИдентификаторТекущейСтрокиЗапросов);
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиТела", ТекДанные.ПолучитьИдентификатор());

	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ДеревоЗапросовТелоМультипартЗначениеНачалоВыбораЗавершениеВыбора",
		ЭтотОбъект, ПараметрыОповещения);

	Если ТекДанные.Вид = Виды.Файл Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ДеревоЗапросовТелоМультипартЗначениеНачалоВыбораЗавершениеВыбораФайла",
			ЭтотОбъект, Новый Структура("ОписаниеОЗавершении", ОписаниеОповещенияОЗавершении)));
	Иначе
		УИ_ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияТекста(ТекДанные.Значение, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДеревоЗапросовПереместитьНаУровеньВверх(Команда)
	
	Строка = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	Родитель = Строка.ПолучитьРодителя();

	Если Родитель <> Неопределено Тогда
		РодительРодителя = Родитель.ПолучитьРодителя();
		Если РодительРодителя = Неопределено Тогда
			ИндексВставки = ДеревоЗапросов.ПолучитьЭлементы().Индекс(Родитель) + 1;
		Иначе
			ИндексВставки = РодительРодителя.ПолучитьЭлементы().Индекс(Родитель) + 1;
		КонецЕсли;
		
		НоваяСтрока = ПереместитьСтрокуДерева(ДеревоЗапросов, Строка, ИндексВставки, РодительРодителя);
		
		Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	СохранитьДанныеЗапросаВДеревоЗапросов();
	
	СтрокаЗапроса  = ТекущаяСтрокаЗапросов();
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСледующегоШага = Новый Структура;
	ПараметрыСледующегоШага.Вставить("ИдентификаторСтроки", СтрокаЗапроса.ПолучитьИдентификатор());
	ПараметрыСледующегоШага.Вставить("Файл", Неопределено);
	
	Если СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.Файл Тогда
		ПараметрыЧтенияФайла = УИ_ОбщегоНазначенияКлиент.НовыйПараметрыЧтенияФайла(УникальныйИдентификатор);
		ПараметрыЧтенияФайла.ПолноеИмяФайла = СтрокаЗапроса.ИмяФайлаТела;
		ПараметрыЧтенияФайла.ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершениеЧтенияФайлаВоВременноеХранилище",
			ЭтотОбъект, ПараметрыСледующегоШага);

		УИ_ОбщегоНазначенияКлиент.НачатьЧтениеФайла(ПараметрыЧтенияФайла);
	ИначеЕсли СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.МультипартФорм Тогда
		НачатьПомещениеФайловВоВременноеХранилищеДляСтрокТелаМультипарт(СтрокаЗапроса,
																		Новый ОписаниеОповещения("ВыполнитьЗапросЗавершениеЧтенияФайловМультипартВоВременноеХранилище",
			ЭтотОбъект, ПараметрыСледующегоШага));
	Иначе
		ВыполнитьЗапросЗавершениеПодготовительныхДействий(ПараметрыСледующегоШага);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДвоичныеДанныеТелаИзФайла(Команда)
	Если УИ_ИдентификаторТекущейСтрокиЗапросов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИдентификаторТекущейСтроки", УИ_ИдентификаторТекущейСтрокиЗапросов);
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗаполнитьДвоичныеДанныеТелаИзФайлаЗавершение", ЭтотОбъект,
		ПараметрыОповещения), , "", Истина, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДвоичныеДанныеТелаЗапросаИзИстории(Команда)
	ТекДанныеИсторииЗапроса = Элементы.ИсторияЗапросов.ТекущиеДанные;
	Если ТекДанныеИсторииЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(ТекДанныеИсторииЗапроса.ТелоЗапросаАдресДвоичныхДанных) Тогда
		Возврат;
	КонецЕсли;

	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.МножественныйВыбор = Ложь;

	ПараметрыСохранения = УИ_ОбщегоНазначенияКлиент.НовыйПараметрыСохраненияФайла();
	ПараметрыСохранения.ДиалогВыбораФайла = ДВФ;
	ПараметрыСохранения.АдресФайлаВоВременномХранилище = ТекДанныеИсторииЗапроса.ТелоЗапросаАдресДвоичныхДанных;
	УИ_ОбщегоНазначенияКлиент.НачатьСохранениеФайла(ПараметрыСохранения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТелоОтветаДвоичныеДанныеВФайл(Команда)
	ТекДанныеИсторииЗапроса = Элементы.ИсторияЗапросов.ТекущиеДанные;
	Если ТекДанныеИсторииЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЭтоАдресВременногоХранилища(ТекДанныеИсторииЗапроса.ТелоОтветаАдресДвоичныхДанных) Тогда
		Возврат;
	КонецЕсли;

	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.МножественныйВыбор = Ложь;

	ПараметрыСохранения = УИ_ОбщегоНазначенияКлиент.НовыйПараметрыСохраненияФайла();
	ПараметрыСохранения.ДиалогВыбораФайла = ДВФ;
	ПараметрыСохранения.АдресФайлаВоВременномХранилище = ТекДанныеИсторииЗапроса.ТелоОтветаАдресДвоичныхДанных;
	УИ_ОбщегоНазначенияКлиент.НачатьСохранениеФайла(ПараметрыСохранения);

КонецПроцедуры

&НаКлиенте
Процедура ПодробнаяИнформацияПоЗаписиИсторииЗапроса(Команда)
	СтрокаЗапроса = ТекущаяСтрокаЗапросов();
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоЗапросовИсторияЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаЗапроса", СтрокаЗапроса.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("СтрокаИстории", ТекДанные.ПолучитьИдентификатор());

	ОткрытьФорму("Обработка.УИ_КонсольHTTPЗапросов.Форма.ФормаПодробнойИнформацииОЗапросе",
				 ПараметрыФормы,
				 ЭтотОбъект,
				 ""
				 + УникальныйИдентификатор
				 + СтрокаЗапроса.ПолучитьИдентификатор()
				 + ТекДанные.ПолучитьИдентификатор());
КонецПроцедуры


&НаКлиенте
Процедура СохранитьДвоичныеДанныеТелаОтвета(Команда)
	Если Не ЭтоАдресВременногоХранилища(ТелоОтветаАдресДвоичныхДанных) Тогда
		Возврат;
	КонецЕсли;

	ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДВФ.МножественныйВыбор = Ложь;

	ПараметрыСохранения = УИ_ОбщегоНазначенияКлиент.НовыйПараметрыСохраненияФайла();
	ПараметрыСохранения.ДиалогВыбораФайла = ДВФ;
	ПараметрыСохранения.АдресФайлаВоВременномХранилище = ТелоОтветаАдресДвоичныхДанных;
	УИ_ОбщегоНазначенияКлиент.НачатьСохранениеФайла(ПараметрыСохранения);
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлЗапросов(Команда)
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		ИнициализироватьКонсоль();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("НовыйФайлЗапросовЗавершение", ЭтотОбъект),
			"Дерево запросов непустое. Продолжить?", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗапросов(Команда)
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		ЗагрузитьФайлКонсоли();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФайлОтчетовЗавершение", ЭтотОбъект),
			"Дерево запросов непустое. Продолжить?", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайл(Команда)
	ВыполнитьСохранениеЗапросовВФайл();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗапросыВФайлКак(Команда)
	ВыполнитьСохранениеЗапросовВФайл(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТелоЗапросаВРедактореJSON(Команда)
	СтрокаДерева = ТекущаяСтрокаЗапросов();
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущаяСтрока", СтрокаДерева.ПолучитьИдентификатор());

	УИ_ОбщегоНазначенияКлиент.РедактироватьJSON(СтрокаДерева.ТелоСтрокой,
												Ложь,
												Новый ОписаниеОповещения("РедактироватьТелоЗапросаВРедактореJSONЗавершение",
		ЭтотОбъект, ПараметрыОповещения));
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТелоЗапросаВРедактореJSONАнализируемогоЗапроса(Команда)
	УИ_ОбщегоНазначенияКлиент.РедактироватьJSON(Элементы.ИсторияЗапросов.ТекущиеДанные.ТелоЗапросаСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТелоОтветаВРедактореJSONАнализируемогоЗапроса(Команда)
	УИ_ОбщегоНазначенияКлиент.РедактироватьJSON(ТелоОтветаСтрокой, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеСтрокиИсторииВЗапрос(Команда)
	СтрокаЗапроса = ТекущаяСтрокаЗапросов();
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИстории = Элементы.ДеревоЗапросовИсторияЗапросов.ТекущиеДанные;
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СкопироватьДанныеСтрокиИсторииВЗапросНаСервере(СтрокаЗапроса.ПолучитьИдентификатор(),
												   СтрокаИстории.ПолучитьИдентификатор());
	ИзвлечьДанныеЗапросаИзСтрокиДерева();
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбщуюКомандуИнструментов(Команда) 
	УИ_ОбщегоНазначенияКлиент.Подключаемый_ВыполнитьОбщуюКомандуИнструментов(ЭтотОбъект, Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьПомещениеФайловВоВременноеХранилищеДляСтрокТелаМультипарт(СтрокаЗапроса, ОписаниеОповещенияОЗавершении)
	ПараметрыОповещений = Новый Структура;
	ПараметрыОповещений.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ПараметрыОповещений.Вставить("СтрокаДереваЗапросов", СтрокаЗапроса);
	ПараметрыОповещений.Вставить("ИндексСтрокиМультипарт", 0);
	ПараметрыОповещений.Вставить("СоответствиеПомещенныхФайлов", Новый Соответствие);

	УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(Новый ОписаниеОповещения("НачатьПомещениеФайловВоВременноеХранилищеДляСтрокТелаМультипартЗавершениеПодключенияРасширенияРаботыСФайлам",
		ЭтотОбъект, ПараметрыОповещений));
КонецПроцедуры


// Начать помещение файлов во временное хранилище для строк тела мультипарт завершение подключения расширения работы с файлам.
// 
// Параметры:
//  Подключено - Булево- Подключено
//  ДополнительныеПараметры - Структура:
//  * ОписаниеОповещенияОЗавершении - ОписаниеОповещения
//  * СтрокаДереваЗапросов - ДанныеФормыЭлементДерева
&НаКлиенте
Процедура НачатьПомещениеФайловВоВременноеХранилищеДляСтрокТелаМультипартЗавершениеПодключенияРасширенияРаботыСФайлам(Подключено,
	ДополнительныеПараметры) Экспорт
	Если Не Подключено Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьОчереднойФайлМультипарт(ДополнительныеПараметры);
КонецПроцедуры

// Поместить очередной файл мультипарт.
// 
// Параметры:
//  ДополнительныеПараметры - Структура:
//  * ОписаниеОповещенияОЗавершении - ОписаниеОповещения
//  * СтрокаДереваЗапросов - ДанныеФормыЭлементДерева
//  * СоответствиеПомещенныхФайлов - Соответствие из КлючИЗначение
//  * ИндексСтрокиМультипарт - Число
&НаКлиенте
Процедура ПоместитьОчереднойФайлМультипарт(ДополнительныеПараметры)
	ВидыМультипарт = ВидыЭлементовМультипарт();
	
	Для ТекИндекс = ДополнительныеПараметры.ИндексСтрокиМультипарт По ДополнительныеПараметры.СтрокаДереваЗапросов.ТелоМультипарт.Количество()
																	  - 1 Цикл
		СтрокаЭлементаМультипарт = ДополнительныеПараметры.СтрокаДереваЗапросов.ТелоМультипарт[ТекИндекс];
		Если СтрокаЭлементаМультипарт.Вид <> ВидыМультипарт.Файл Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаЭлементаМультипарт.Значение) Тогда
			Продолжить;
		КонецЕсли;

		ДополнительныеПараметры.ИндексСтрокиМультипарт = ТекИндекс;

		ПараметрыЧтения = УИ_ОбщегоНазначенияКлиент.НовыйПараметрыЧтенияФайла(УникальныйИдентификатор);
		ПараметрыЧтения.РасширениеРаботыСФайламиПодключено = Истина;
		ПараметрыЧтения.ПолноеИмяФайла = СтрокаЭлементаМультипарт.Значение;
		ПараметрыЧтения.ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоместитьОчереднойФайлМультипартЗавершениеЧтенияОчередногоФайла",
			ЭтотОбъект, ДополнительныеПараметры);

		УИ_ОбщегоНазначенияКлиент.НачатьЧтениеФайла(ПараметрыЧтения);
		Возврат;
	КонецЦикла;

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении,
								 ДополнительныеПараметры.СоответствиеПомещенныхФайлов);
КонецПроцедуры

// Поместить очередной файл мультипарт завершение чтения очередного файла.
// 
// Параметры:
//  Результат - Массив Из Структура:
//  	* ПолноеИмя - Строка
//  	* Хранение - Строка
//  ДополнительныеПараметры - Структура:
//  	* ОписаниеОповещенияОЗавершении - ОписаниеОповещения
//  	* СтрокаДереваЗапросов - ДанныеФормыЭлементДерева
//  	* СоответствиеПомещенныхФайлов - Соответствие из КлючИЗначение
//  	* ИндексСтрокиМультипарт - Число
&НаКлиенте
Процедура ПоместитьОчереднойФайлМультипартЗавершениеЧтенияОчередногоФайла(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Количество() > 0 Тогда
			ДополнительныеПараметры.СоответствиеПомещенныхФайлов.Вставить(ДополнительныеПараметры.ИндексСтрокиМультипарт,
																		  Результат[0].Хранение);
		КонецЕсли;
	КонецЕсли;
	ДополнительныеПараметры.ИндексСтрокиМультипарт = ДополнительныеПараметры.ИндексСтрокиМультипарт + 1;
	ПоместитьОчереднойФайлМультипарт(ДополнительныеПараметры);
КонецПроцедуры


&НаКлиенте
Процедура ДеревоЗапросовТелоМультипартЗначениеНачалоВыбораЗавершениеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныеФайлы.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОЗавершении, ВыбранныеФайлы[0]);
КонецПроцедуры

// Дерево запросов тело мультипарт значение начало выбора завершение выбора.
// 
// Параметры:
//  Результат - Строка, Неопределено - Результат
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторСтрокиЗапросов - Число
//  * ИдентификаторСтрокиТела - Число
&НаКлиенте
Процедура ДеревоЗапросовТелоМультипартЗначениеНачалоВыбораЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ДеревоЗапросов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиЗапросов);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТела = СтрокаДерева.ТелоМультипарт.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиТела);
	Если СтрокаТела = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТела.Значение = Результат;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияАктивизацииСтрокиДереваЗапросов()
	СохранитьДанныеЗапросаВДеревоЗапросов();
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УИ_ИдентификаторТекущейСтрокиЗапросов = ТекДанные.ПолучитьИдентификатор();
	ИзвлечьДанныеЗапросаИзСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиПоСодержимомуТелаЗапроса()
	СтрокаДерева = ТекущаяСтрокаЗапросов();
	Если СтрокаДерева = Неопределено Тогда
		ВозвраТ;
	КонецЕсли;
	
	ЗначениеЗаголовкаСодержимого = "";

	Если СтрокаДерева.ВидТела = ВидыТелаЗапроса.Строка Тогда
		Если СтрокаДерева.ТипСтроковогоСодержимого <> "Нет" И ЗначениеЗаполнено(СтрокаДерева.ТипСтроковогоСодержимого) Тогда
			ТипыТекстов = ТипыТекстовогоСодержимого();
			Если ТипыТекстов.Свойство(СтрокаДерева.ТипСтроковогоСодержимого) Тогда
				ЗначениеЗаголовкаСодержимого = ТипыТекстов[СтрокаДерева.ТипСтроковогоСодержимого];

				Кодировка = "";
				
				Кодировки = ВидыКодировокТелаЗапроса();
								
				Если СтрокаДерева.КодировкаТела = Кодировки.Авто
					Или СтрокаДерева.КодировкаТела = Кодировки.Системная Тогда
						
				ИначеЕсли СтрокаДерева.КодировкаТела = Кодировки.UTF8 Тогда 
					Кодировка="utf-8";
				ИначеЕсли СтрокаДерева.КодировкаТела = Кодировки.ANSI Тогда 
					Кодировка = "windows-1251";
				ИначеЕсли СтрокаДерева.КодировкаТела = Кодировки.UTF16 Тогда 
					Кодировка = "utf-16";
				ИначеЕсли СтрокаДерева.КодировкаТела = Кодировки.OEM Тогда 
					Кодировка = "cp866";
				ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.КодировкаТела) Тогда
					Кодировка = СтрокаДерева.КодировкаТела;
				КонецЕсли;
				Если ЗначениеЗаполнено(Кодировка) Тогда
					ЗначениеЗаголовкаСодержимого = ЗначениеЗаголовкаСодержимого
												   + "; charset="
												   + Кодировка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ВидТела = ВидыТелаЗапроса.ДвоичныеДанные Тогда 
		ЗначениеЗаголовкаСодержимого = "application/octet-stream";	
	ИначеЕсли СтрокаДерева.ВидТела = ВидыТелаЗапроса.МультипартФорм Тогда
		ЗначениеЗаголовкаСодержимого = "multipart/form-data; boundary=" + РазделительТелаМультипарт;
	Иначе
		Возврат;
	КонецЕсли;
		
	ИмяЗаголовкаПоиска = "Content-Type";
	
	Если ЗначениеЗаполнено(ЗначениеЗаголовкаСодержимого) Тогда
		ДобавитьЗаголовокЗапроса(ИмяЗаголовкаПоиска, ЗначениеЗаголовкаСодержимого);
	Иначе
		УдалитьЗаголовокЗапроса(ИмяЗаголовкаПоиска);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаголовокЗапроса(ИмяЗаголовка, ЗначениеЗаголовка)
	Если РедактированиеЗаголовковТаблицей Тогда
		НайденаСтрокаЗаголовка = Ложь;
		Для Каждого Стр Из ТаблицаЗаголовковЗапроса Цикл
			Если НРег(ИмяЗаголовка) = НРег(Стр.Ключ) Тогда
				Стр.Использование = Истина;
				Стр.Значение = ЗначениеЗаголовка;
				
				НайденаСтрокаЗаголовка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденаСтрокаЗаголовка Тогда
			Стр = ТаблицаЗаголовковЗапроса.Добавить();
			Стр.Использование = Истина;
			Стр.Ключ = ИмяЗаголовка;
			Стр.Значение = ЗначениеЗаголовка;	
		КонецЕсли;
	Иначе
		СтрокиЗаголовков = СтрРазделить(ЗаголовкиСтрока, Символы.ПС);
		
		ИскомыйИндексЗаголовка = Неопределено;
		
		Для Индекс = 0 по СтрокиЗаголовков.Количество() -1 Цикл
			Стр = СтрокиЗаголовков[Индекс];
			
			Если Не ЗначениеЗаполнено(Стр) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗаголовка = СтрРазделить(Стр, ":");
			Если НРег(МассивЗаголовка[0]) = НРег(ИмяЗаголовка) Тогда
				ИскомыйИндексЗаголовка = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СторокаДляВставки = СтрШаблон("%1:%2",ИмяЗаголовка, ЗначениеЗаголовка);
		
		Если ИскомыйИндексЗаголовка = Неопределено Тогда
			СтрокиЗаголовков.Добавить(СторокаДляВставки);
		Иначе
			СтрокиЗаголовков[ИскомыйИндексЗаголовка] = СторокаДляВставки;
		КонецЕсли;
			
		ЗаголовкиСтрока = СтрСоединить(СтрокиЗаголовков, Символы.ПС);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура УдалитьЗаголовокЗапроса(ИмяЗаголовка)
	Если РедактированиеЗаголовковТаблицей Тогда
		УдаляемаяСтрока = Неопределено;
		Для Каждого Стр Из ТаблицаЗаголовковЗапроса Цикл
			Если НРег(ИмяЗаголовка) = НРег(Стр.Ключ) Тогда
				УдаляемаяСтрока = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдаляемаяСтрока <> Неопределено Тогда
			ТаблицаЗаголовковЗапроса.Удалить(УдаляемаяСтрока);
		КонецЕсли;
	Иначе
		СтрокиЗаголовков = СтрРазделить(ЗаголовкиСтрока, Символы.ПС);
		
		ИскомыйИндексЗаголовка = Неопределено;
		
		Для Индекс = 0 по СтрокиЗаголовков.Количество() -1 Цикл
			Стр = СтрокиЗаголовков[Индекс];
			
			Если Не ЗначениеЗаполнено(Стр) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗаголовка = СтрРазделить(Стр, ":");
			Если НРег(МассивЗаголовка[0]) = НРег(ИмяЗаголовка) Тогда
				ИскомыйИндексЗаголовка = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ИскомыйИндексЗаголовка <> Неопределено Тогда
			СтрокиЗаголовков.Удалить(ИскомыйИндексЗаголовка);
			ЗаголовкиСтрока = СтрСоединить(СтрокиЗаголовков, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПереместитьСтрокуДерева(Дерево, ПеремещаемаяСтрока, ИндексВставки, НовыйРодитель, Уровень = 0)

	Если Уровень = 0 Тогда

		Если НовыйРодитель = Неопределено Тогда
			НоваяСтрока = Дерево.ПолучитьЭлементы().Вставить(ИндексВставки);
		Иначе
			НоваяСтрока = НовыйРодитель.ПолучитьЭлементы().Вставить(ИндексВставки);
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
		ПереместитьСтрокуДерева(Дерево, ПеремещаемаяСтрока, ИндексВставки, НоваяСтрока, Уровень + 1);

		ПеремещаемаяСтрокаРодитель = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если ПеремещаемаяСтрокаРодитель = Неопределено Тогда
			Дерево.ПолучитьЭлементы().Удалить(ПеремещаемаяСтрока);
		Иначе
			ПеремещаемаяСтрокаРодитель.ПолучитьЭлементы().Удалить(ПеремещаемаяСтрока);
		КонецЕсли;

	Иначе

		Для Каждого Строка Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
			НоваяСтрока = НовыйРодитель.ПолучитьЭлементы().Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
			
			ПереместитьСтрокуДерева(Дерево, Строка, НоваяСтрока, ИндексВставки, Уровень + 1);
		КонецЦикла;

	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции




&НаСервере
Процедура СкопироватьДанныеСтрокиИсторииВЗапросНаСервере(ИдентификаторСтрокиЗапросов, ИдентификаторСтрокиИстории)
	СтрокаЗапроса = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторСтрокиЗапросов);
	СтрокаИстории = СтрокаЗапроса.ИсторияЗапросов.НайтиПоИдентификатору(ИдентификаторСтрокиИстории);
	
	СтрокаЗапроса.URLЗапроса = СтрокаИстории.URLЗапроса;
	СтрокаЗапроса.ВидТела = СтрокаИстории.ВидТелаЗапроса;
	СтрокаЗапроса.ЗапросHTTP = СтрокаИстории.HTTPФункция;
	СтрокаЗапроса.ИмяФайлаТела = СтрокаИстории.ТелоЗапросаИмяФайла;
	СтрокаЗапроса.ИспользоватьBOM = СтрокаИстории.BOM;
	СтрокаЗапроса.ИспользоватьПрокси = СтрокаИстории.ИспользоватьПрокси;
	СтрокаЗапроса.КодировкаТела = СтрокаИстории.КодировкаТелаЗапроса;
	СтрокаЗапроса.ПроксиАутентификацияОС = СтрокаИстории.ПроксиАутентификацияОС;
	СтрокаЗапроса.ПроксиПароль = СтрокаИстории.ПроксиПароль;
	СтрокаЗапроса.ПроксиПорт = СтрокаИстории.ПроксиПорт;
	СтрокаЗапроса.ПроксиПользователь = СтрокаИстории.ПроксиПользователь;
	СтрокаЗапроса.ПроксиСервер = СтрокаИстории.ПроксиСервер;
	СтрокаЗапроса.Таймаут = СтрокаИстории.Таймаут;
	СтрокаЗапроса.ТелоСтрокой = СтрокаИстории.ТелоЗапросаСтрока;

	СтрокаЗапроса.ТелоДвоичныеДанные = Неопределено;
	Если ЭтоАдресВременногоХранилища(СтрокаИстории.ТелоЗапросаАдресДвоичныхДанных) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаИстории.ТелоЗапросаАдресДвоичныхДанных);
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			СтрокаЗапроса.ТелоДвоичныеДанные = УИ_ОбщегоНазначения.ЗначениеХранилищаКонтейнераДвочныхДанных(ДвоичныеДанные);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуЗаголовковПоСтроке(СтрокаИстории.ЗаголовкиЗапроса, СтрокаЗапроса.Заголовки);
//	СтрокаЗапроса.ПараметрыURL = СтрокаИстории.КодировкаТелаЗапроса;

КонецПроцедуры

&НаКлиенте
Функция СтруктураОписанияСохраняемогоФайла()
	Структура=УИ_ОбщегоНазначенияКлиент.ПустаяСтруктураОписанияВыбираемогоФайла();
	Структура.ИмяФайла=ИмяФайлаЗапросов;

	// Пока закоментим сохранение в JSON, т.к. библиотека ошибки выдает на двоичных данных
	УИ_ОбщегоНазначенияКлиент.ДобавитьФорматВОписаниеФайлаСохранения(Структура,
		"Файл запросов консоли HTTP (*.uihttp)", "uihttp");

	Возврат Структура;
КонецФункции

&НаКлиенте
Процедура ВыполнитьСохранениеЗапросовВФайл(СохранитьКак = Ложь)
	СохранитьДанныеЗапросаВДеревоЗапросов();
	
	УИ_ОбщегоНазначенияКлиент.СохранитьДанныеКонсолиВФайл("КонсольHTTPЗапросов",
														  СохранитьКак,
														  СтруктураОписанияСохраняемогоФайла(),
														  ПолучитьСтрокуДанныхФайлаДляСохраненияВФайл(),
														  Новый ОписаниеОповещения("СохранениеВФайлЗавершение",
		ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаТелаЗапроса()
	СтрокаЗапроса = ТекущаяСтрокаЗапросов();	
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.БезТела Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаТелаЗапросаБезТела;
	ИначеЕсли СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.Строка Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаТелаЗапросаСтрокой;
	ИначеЕсли СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.ДвоичныеДанные Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаТелаЗапросаДвоичныеДанные;
	ИначеЕсли СтрокаЗапроса.ВидТела = ВидыТелаЗапроса.МультипартФорм Тогда 
		НоваяСтраница = Элементы.ГруппаСтраницаТелаМультипарт;
	Иначе
		НоваяСтраница = Элементы.ГруппаСтраницаТелаЗапросаИмяФайлаТела;
	КонецЕсли;

	Элементы.ГруппаСтраницыТелаЗапроса.ТекущаяСтраница = НоваяСтраница;
	
	УстановитьЗаголовкиПоСодержимомуТелаЗапроса();
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииВидаАутентификацииЗапроса()
	СтрокаЗапроса = ТекущаяСтрокаЗапросов();	
	Если СтрокаЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Виды = ВидыАутентификации();
		
	ВидимостьГруппыНастроекАутентификации = Истина;	
	Если СтрокаЗапроса.АутентификацияВид = Виды.Базовая Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаАутентифкацияБазовая;
	ИначеЕсли СтрокаЗапроса.АутентификацияВид = Виды.BearerToken Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаАутентификацияТокен;
	ИначеЕсли СтрокаЗапроса.АутентификацияВид = Виды.NTML Тогда 
		НоваяСтраница = Элементы.ГруппаСтраницаАутентифкацияЗаглушка;
	Иначе
		ВидимостьГруппыНастроекАутентификации = Ложь;
		НоваяСтраница = Элементы.ГруппаСтраницаАутентифкацияЗаглушка;
	КонецЕсли;

	Элементы.ГруппаСтраницыВидыАутентификации.ТекущаяСтраница = НоваяСтраница;
	Элементы.ГруппаНастройкиАутентификацииЗапроса.Видимость = ВидимостьГруппыНастроекАутентификации;
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаЗапросов()
	Если УИ_ИдентификаторТекущейСтрокиЗапросов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ДеревоЗапросов.НайтиПоИдентификатору(УИ_ИдентификаторТекущейСтрокиЗапросов);	
	
КонецФункции

// Виды тела запроса.
// 
// Возвращаемое значение:
//  Структура -  Виды тела запроса:
// * Строка - Строка - 
// * ДвоичныеДанные - Строка - 
// * Файл - Строка - 
&НаКлиентеНаСервереБезКонтекста
Функция ВидыТелаЗапроса()

	ВидыТела = Новый Структура;
	ВидыТела.Вставить("БезТела", "БезТела");	
	ВидыТела.Вставить("Строка", "Строка");	
	ВидыТела.Вставить("ДвоичныеДанные", "ДвоичныеДанные");	
	ВидыТела.Вставить("Файл", "Файл");	
	ВидыТела.Вставить("МультипартФорм", "МультипартФорм");	

	Возврат ВидыТела;
КонецФункции

// Виды элементов мультипарт.
// 
// Возвращаемое значение:
//  Структура -  Виды элементов мультипарт:
// * Строка - Строка - 
// * Файл - Строка - 
&НаКлиентеНаСервереБезКонтекста
Функция ВидыЭлементовМультипарт()
	Виды = Новый Структура;
	Виды.Вставить("Строка", "Строка");
	Виды.Вставить("Файл", "Файл");
	
	Возврат Виды;
КонецФункции

// Виды HTTPМетодов.
// 
// Возвращаемое значение:
//  Структура -  Виды HTTPМетодов:
// * GET - Строка - 
// * POST - Строка - 
// * PUT - Строка - 
// * PATCH - Строка - 
// * DELETE - Строка - 
// * OPTIONS - Строка - 
// * HEAD - Строка - 
&НаКлиентеНаСервереБезКонтекста
Функция ВидыHTTPМетодов()
	Виды = Новый Структура;
	Виды.Вставить("GET", "GET");
	Виды.Вставить("POST", "POST");
	Виды.Вставить("PUT", "PUT");
	Виды.Вставить("PATCH", "PATCH");
	Виды.Вставить("DELETE", "DELETE");
	Виды.Вставить("OPTIONS", "OPTIONS");
	Виды.Вставить("HEAD", "HEAD");
	
	Возврат Виды;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыТекстовогоСодержимого()
	Типы = Новый Структура;
	Типы.Вставить("json", "application/json");
	Типы.Вставить("xml", "application/xml");
	Типы.Вставить("yaml", "text/yaml");
	Типы.Вставить("текст", "text/plain");

	Возврат Типы;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыАутентификации()
	Виды = Новый Структура;
	Виды.Вставить("Нет", "Нет");
	Виды.Вставить("Базовая", "Базовая");
	Виды.Вставить("BearerToken", "BearerToken");
	Виды.Вставить("NTML", "NTML");
	
	Возврат Виды;
КонецФункции

#Область ПараметрыДереваЗапроса



&НаКлиенте
Функция ПодготовитьСтрокуПараметров()
//		стрПараметры = "";
//		
//	Для Каждого стрПараметра Из ПараметрыURL Цикл
//		Если стрПараметра.Использование Тогда
//			Если ПустаяСтрока(стрПараметры) Тогда
//				стрПараметры = СтрШаблон("%1=%2", стрПараметра.Имя, стрПараметра.Значение);
//			Иначе
//				стрПараметры = стрПараметры+"&"+СтрШаблон("%1=%2", стрПараметра.Имя, стрПараметра.Значение);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат стрПараметры;
Возврат "";
КонецФункции

&НаКлиенте
Процедура ПодставитьПараметрыВURL(стрПараметры)
//	ПоложениеПараметров = СтрНайти(URLЗапроса, "?");
//	
//	Если ПоложениеПараметров > 0 Тогда
//		URLДоПараметров = Лев(URLЗапроса, ПоложениеПараметров-1);
//	Иначе
//		URLДоПараметров = URLЗапроса;
//	КонецЕсли;
//	
//	URLЗапроса = СтрШаблон("%1?%2", URLДоПараметров, стрПараметры);
КонецПроцедуры

#КонецОбласти

#Область ФайлыЗапросов

// Отработка загрузки файла с отчетами из адреса.
&НаКлиенте
Процедура ОтработкаЗагрузкиИзАдреса(Адрес)

	ЗагрузитьФайлКонсолиНаСервере(Адрес);
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапросыИзФайла(ЗапросФайла, КоллекцияЭлементовЗапросов)
	НоваяСтрокаЗапросов = КоллекцияЭлементовЗапросов.Добавить();
	НоваяСтрокаЗапросов.Имя = ЗапросФайла.Имя;
	НоваяСтрокаЗапросов.URLЗапроса = ЗапросФайла.URLЗапроса;
	НоваяСтрокаЗапросов.ВидТела = ЗапросФайла.ВидТела;
	НоваяСтрокаЗапросов.ЗапросHTTP = ЗапросФайла.ЗапросHTTP;
	НоваяСтрокаЗапросов.ИмяФайлаТела = ЗапросФайла.ИмяФайлаТела;
	НоваяСтрокаЗапросов.ИспользоватьBOM = ЗапросФайла.ИспользоватьBOM;
	НоваяСтрокаЗапросов.КодировкаТела = ЗапросФайла.КодировкаТела;
	НоваяСтрокаЗапросов.ИспользоватьПрокси = ЗапросФайла.ИспользоватьПрокси;
	НоваяСтрокаЗапросов.ПроксиАутентификацияОС = ЗапросФайла.ПроксиАутентификацияОС;
	НоваяСтрокаЗапросов.ПроксиПароль = ЗапросФайла.ПроксиПароль;
	НоваяСтрокаЗапросов.ПроксиПользователь = ЗапросФайла.ПроксиПользователь;
	НоваяСтрокаЗапросов.ПроксиПорт = ЗапросФайла.ПроксиПорт;
	НоваяСтрокаЗапросов.ПроксиСервер = ЗапросФайла.ПроксиСервер;
	НоваяСтрокаЗапросов.Таймаут = ЗапросФайла.Таймаут;
	НоваяСтрокаЗапросов.ТелоСтрокой = ЗапросФайла.ТелоСтрокой;
	НоваяСтрокаЗапросов.ТелоДвоичныеДанные = Неопределено;
	НоваяСтрокаЗапросов.ТипСтроковогоСодержимого = ЗапросФайла.ТипСтроковогоСодержимого;
	НоваяСтрокаЗапросов.Комментарий = ЗапросФайла.Комментарий;

	//Аутентификация
	НоваяСтрокаЗапросов.АутентификацияВид = ЗапросФайла.АутентификацияВид;
	НоваяСтрокаЗапросов.АутентификацияИспользовать = ЗапросФайла.АутентификацияИспользовать;
	НоваяСтрокаЗапросов.АутентификацияПароль = ЗапросФайла.АутентификацияПароль;
	НоваяСтрокаЗапросов.АутентификацияПользователь = ЗапросФайла.АутентификацияПользователь;
	НоваяСтрокаЗапросов.АутентификацияИмяЗаголовка = ЗапросФайла.АутентификацияИмяЗаголовка;
	НоваяСтрокаЗапросов.АутентификацияПрефиксТокена = ЗапросФайла.АутентификацияПрефиксТокена;
	

	Если ЗапросФайла.ТелоДвоичныеДанные <> Неопределено Тогда
		Попытка
			Хранилище = ЗначениеИзСтрокиВнутр(ЗапросФайла.ТелоДвоичныеДанные);//ХранилищеЗначения
			ДвоичныеДанные = Хранилище.Получить();
			НоваяСтрокаЗапросов.ТелоДвоичныеДанные = УИ_ОбщегоНазначения.ЗначениеХранилищаКонтейнераДвочныхДанных(ДвоичныеДанные);
		Исключение
			УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для запроса "
																 + НоваяСтрокаЗапросов.Имя
																 + " не удалось прочитать двоичные данные тела запроса");
		КонецПопытки;
	КонецЕсли;

	Для Каждого ТекЗаголовок Из ЗапросФайла.Заголовки Цикл
		НоваяСтрока = НоваяСтрокаЗапросов.Заголовки.Добавить();
		НоваяСтрока.Использование = ТекЗаголовок.Использование;
		НоваяСтрока.Ключ = ТекЗаголовок.Ключ;
		НоваяСтрока.Значение = ТекЗаголовок.Значение;
	КонецЦикла;	
	
	Для Каждого ТекЗаголовок Из ЗапросФайла.ПараметрыURL Цикл
		НоваяСтрока = НоваяСтрокаЗапросов.ПараметрыURL.Добавить();
		НоваяСтрока.Использование = ТекЗаголовок.Использование;
		НоваяСтрока.Имя = ТекЗаголовок.Имя;
		НоваяСтрока.Значение = ТекЗаголовок.Значение;
	КонецЦикла;	

	Для Каждого ТекОписание Из ЗапросФайла.ТелоМультипарт Цикл
		НоваяСтрока = НоваяСтрокаЗапросов.ТелоМультипарт.Добавить();
		НоваяСтрока.Использование = ТекОписание.Использование;
		НоваяСтрока.Имя = ТекОписание.Имя;
		НоваяСтрока.Вид = ТекОписание.Вид;
		НоваяСтрока.Значение = ТекОписание.Значение;
	КонецЦикла;

	КоллекцияСтрок = НоваяСтрокаЗапросов.ПолучитьЭлементы();
	Для Каждого ПодчиненныйЗапрос Из ЗапросФайла.Строки Цикл
		ЗаполнитьЗапросыИзФайла(ПодчиненныйЗапрос, КоллекцияСтрок)
	КонецЦикла;

КонецПроцедуры



// Загрузить файл консоли на сервере.
//
// Параметры:
//  Адрес - Строка -адрес хранилища, из которого нужно загрузить файл.
&НаСервере
Процедура ЗагрузитьФайлКонсолиНаСервере(Адрес)
	
	ДанныеФайла=ПолучитьИзВременногоХранилища(Адрес);

	ЧтениеJSON=Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ДанныеФайла.ОткрытьПотокДляЧтения());

	СтруктураФайла=ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	ЭлементыЗапросов =  ДеревоЗапросов.ПолучитьЭлементы();
	ЭлементыЗапросов.Очистить();
	
	Для Каждого ТекЗапрос Из СтруктураФайла.Запросы Цикл
		ЗаполнитьЗапросыИзФайла(ТекЗапрос, ЭлементыЗапросов);	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлКонсолиПослеПомещенияФайла(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УИ_ИдентификаторТекущейСтрокиЗапросов = Неопределено;
	ИмяФайлаЗапросов = Результат.ИмяФайла;
	ОтработкаЗагрузкиИзАдреса(Результат.Адрес);
	
	Модифицированность = Ложь;
КонецПроцедуры

// Загрузить файл.
//
// Параметры:
//  БезВыбораФайла - Булево
&НаКлиенте
Процедура ЗагрузитьФайлКонсоли(БезВыбораФайла = Ложь)

	УИ_ОбщегоНазначенияКлиент.ПрочитатьДанныеКонсолиИзФайла("КонсольHTTPЗапросов",
															СтруктураОписанияСохраняемогоФайла(),
															Новый ОписаниеОповещения("ЗагрузитьФайлКонсолиПослеПомещенияФайла",
		ЭтотОбъект),
															БезВыбораФайла);

КонецПроцедуры

// Завершение обработчика открытия файла.
&НаКлиенте
Процедура ОткрытьФайлОтчетовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьФайлКонсоли();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонсоль()
	Модифицированность = Ложь;
	ИмяФайлаЗапросов = "";

	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	ИнициализироватьДеревоЗапросов();

	ОбновитьЗаголовок();
КонецПроцедуры

// Завершение обработчика создания нового файла запросов.
&НаКлиенте
Процедура НовыйФайлЗапросовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ИнициализироватьКонсоль();

КонецПроцедуры

// Завершение обработчика открытия файла.
&НаКлиенте
Процедура СохранениеВФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяФайлаЗапросов=Результат;
	Модифицированность = Ложь;
	ОбновитьЗаголовок();

КонецПроцедуры

// Поместить файл во временное хранилище.
&НаСервере
Функция ПоместитьДанныеИсторииВоВременноеХранилище()
	
	

	ТаблицаЗначенийИстории = РеквизитФормыВЗначение("ИсторияЗапросов");

	ТаблицаЗначенийИстории.Колонки.Добавить("ТелоЗапросаДвоичныеДанные");
	ТаблицаЗначенийИстории.Колонки.Добавить("ТелоОтветаДвоичныеДанные");
	ТаблицаЗначенийИстории.Колонки.Добавить("ТелоОтвета");
	Для Каждого СтрокаТЗ Из ТаблицаЗначенийИстории Цикл
		Если ЭтоАдресВременногоХранилища(СтрокаТЗ.ТелоЗапросаАдресДвоичныхДанных) Тогда
			СтрокаТЗ.ТелоЗапросаДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТЗ.ТелоЗапросаАдресДвоичныхДанных);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(СтрокаТЗ.ТелоОтветаАдресДвоичныхДанных) Тогда
			СтрокаТЗ.ТелоОтветаДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТЗ.ТелоОтветаАдресДвоичныхДанных);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(СтрокаТЗ.АдресТелаОтветаСтрокой) Тогда
			СтрокаТЗ.ТелоОтвета = ПолучитьИзВременногоХранилища(СтрокаТЗ.АдресТелаОтветаСтрокой);
		КонецЕсли;
	КонецЦикла;

	ТаблицаЗначенийИстории.Колонки.Удалить("ТелоЗапросаАдресДвоичныхДанных");
	ТаблицаЗначенийИстории.Колонки.Удалить("ТелоОтветаАдресДвоичныхДанных");
	ТаблицаЗначенийИстории.Колонки.Удалить("АдресТелаОтветаСтрокой");
	
	ДеревоЗапросовЗначение = РеквизитФормыВЗначение("ДеревоЗапросов");
	
	СтруктураСохранения = Новый Структура("ТаблицаЗначенийИстории, ДеревоЗапросовЗначение", ТаблицаЗначенийИстории, ДеревоЗапросовЗначение);

	Результат = ПоместитьВоВременноеХранилище(СтруктураСохранения, УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

&НаСервере
Функция ОписаниеЗапросаДляСохраненияВФайл(СтрокаДереваЗапросов)
	ОписаниеЗапроса = Новый Структура;
	ОписаниеЗапроса.Вставить("Имя", СтрокаДереваЗапросов.Имя);
	ОписаниеЗапроса.Вставить("URLЗапроса", СтрокаДереваЗапросов.URLЗапроса);
	ОписаниеЗапроса.Вставить("ВидТела", СтрокаДереваЗапросов.ВидТела);
	ОписаниеЗапроса.Вставить("ЗапросHTTP", СтрокаДереваЗапросов.ЗапросHTTP);
	ОписаниеЗапроса.Вставить("ИмяФайлаТела", СтрокаДереваЗапросов.ИмяФайлаТела);
	ОписаниеЗапроса.Вставить("ИспользоватьBOM", СтрокаДереваЗапросов.ИспользоватьBOM);
	ОписаниеЗапроса.Вставить("КодировкаТела", СтрокаДереваЗапросов.КодировкаТела);
	ОписаниеЗапроса.Вставить("ИспользоватьПрокси", СтрокаДереваЗапросов.ИспользоватьПрокси);
	ОписаниеЗапроса.Вставить("ПроксиАутентификацияОС", СтрокаДереваЗапросов.ПроксиАутентификацияОС);
	ОписаниеЗапроса.Вставить("ПроксиПароль", СтрокаДереваЗапросов.ПроксиПароль);
	ОписаниеЗапроса.Вставить("ПроксиПользователь", СтрокаДереваЗапросов.ПроксиПользователь);
	ОписаниеЗапроса.Вставить("ПроксиПорт", СтрокаДереваЗапросов.ПроксиПорт);
	ОписаниеЗапроса.Вставить("ПроксиСервер", СтрокаДереваЗапросов.ПроксиСервер);
	ОписаниеЗапроса.Вставить("Таймаут", СтрокаДереваЗапросов.Таймаут);
	ОписаниеЗапроса.Вставить("ТелоСтрокой", СтрокаДереваЗапросов.ТелоСтрокой);
	ОписаниеЗапроса.Вставить("ТипСтроковогоСодержимого", СтрокаДереваЗапросов.ТипСтроковогоСодержимого);
	ОписаниеЗапроса.Вставить("Комментарий", СтрокаДереваЗапросов.Комментарий);

	//Аутентификация
	ОписаниеЗапроса.Вставить("АутентификацияВид", СтрокаДереваЗапросов.АутентификацияВид);
	ОписаниеЗапроса.Вставить("АутентификацияИспользовать", СтрокаДереваЗапросов.АутентификацияИспользовать);
	ОписаниеЗапроса.Вставить("АутентификацияПароль", СтрокаДереваЗапросов.АутентификацияПароль);
	ОписаниеЗапроса.Вставить("АутентификацияПользователь", СтрокаДереваЗапросов.АутентификацияПользователь);
	ОписаниеЗапроса.Вставить("АутентификацияПрефиксТокена", СтрокаДереваЗапросов.АутентификацияПрефиксТокена);
	ОписаниеЗапроса.Вставить("АутентификацияИмяЗаголовка", СтрокаДереваЗапросов.АутентификацияИмяЗаголовка);
	
	
	Если СтрокаДереваЗапросов.ТелоДвоичныеДанные = Неопределено Тогда
		ОписаниеЗапроса.Вставить("ТелоДвоичныеДанные", Неопределено);
	Иначе
		ДвоичныеДанные = УИ_ОбщегоНазначения.ЗначениеИзХранилищаКонтейнераДвоичныхДанных(СтрокаДереваЗапросов.ТелоДвоичныеДанные);
		ОписаниеЗапроса.Вставить("ТелоДвоичныеДанные", ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ДвоичныеДанные,
			Новый СжатиеДанных(9))));
	КонецЕсли;
	
	ОписаниеЗапроса.Вставить("Заголовки", Новый Массив);
	
	Для Каждого Стр Из СтрокаДереваЗапросов.Заголовки Цикл
		ОписаниеЗаголовка = Новый Структура;
		ОписаниеЗаголовка.Вставить("Использование", Стр.Использование);
		ОписаниеЗаголовка.Вставить("Ключ", Стр.Ключ);
		ОписаниеЗаголовка.Вставить("Значение", Стр.Значение);

		ОписаниеЗапроса.Заголовки.Добавить(ОписаниеЗаголовка);
	КонецЦикла;
	
	ОписаниеЗапроса.Вставить("ПараметрыURL", Новый Массив);
	Для Каждого Стр Из СтрокаДереваЗапросов.ПараметрыURL Цикл
		ОписаниеПараметра = Новый Структура;
		ОписаниеПараметра.Вставить("Использование", Стр.Использование);
		ОписаниеПараметра.Вставить("Имя", Стр.Имя);
		ОписаниеПараметра.Вставить("Значение", Стр.Значение);
		
		ОписаниеЗапроса.ПараметрыURL.Добавить(ОписаниеПараметра);
	КонецЦикла;
	
	ОписаниеЗапроса.Вставить("ТелоМультипарт", Новый Массив);
	Для Каждого Стр Из СтрокаДереваЗапросов.ТелоМультипарт Цикл
		Описание= Новый Структура;
		Описание.Вставить("Использование", Стр.Использование);
		Описание.Вставить("Имя", Стр.Имя);
		Описание.Вставить("Вид", Стр.Вид);
		Описание.Вставить("Значение", Стр.Значение);
		
		ОписаниеЗапроса.ТелоМультипарт.Добавить(Описание);
	КонецЦикла;
	
	ОписаниеЗапроса.Вставить("Строки", Новый Массив);
	
	Для Каждого Стр Из СтрокаДереваЗапросов.ПолучитьЭлементы() Цикл
		ОписаниеЗапроса.Строки.Добавить(ОписаниеЗапросаДляСохраненияВФайл(Стр));
	КонецЦикла;

	Возврат ОписаниеЗапроса;
КонецФункции



&НаСервере
Функция ПолучитьСтрокуДанныхФайлаДляСохраненияВФайл()
	
	СохраняемыеДанные = Новый Структура;
	СохраняемыеДанные.Вставить("ВерсияФормата", 2);
	СохраняемыеДанные.Вставить("Запросы", Новый Массив);
	
	Для Каждого СтрокаАлгоритма Из ДеревоЗапросов.ПолучитьЭлементы() Цикл
		СохраняемыеДанные.Запросы.Добавить(ОписаниеЗапросаДляСохраненияВФайл(СтрокаАлгоритма));
	КонецЦикла;
	
	Возврат УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(СохраняемыеДанные);

КонецФункции

#КонецОбласти

#Область ВыполнениеЗапроса

// Выполнить запрос завершение подготовительных действий.
// 
// Параметры:
//  ПараметрыЗаврешения - Структура -  Параметры заврешения:
// * ИдентификаторСтроки - Число - 
// * Файл - Структура: 
// 		** Хранение - Строка - Адрес файла во временном хранилище
// 		** ПолноеИмя - Строка 
&НаКлиенте
Процедура ВыполнитьЗапросЗавершениеПодготовительныхДействий(ПараметрыЗаврешения) 
	ВыполнитьЗапросНаСервере(ПараметрыЗаврешения.ИдентификаторСтроки, ПараметрыЗаврешения.Файл);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершениеЧтенияФайлаВоВременноеХранилище(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поместить файл тела во временное хранилище");
		Возврат;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поместить файл тела во временное хранилище");
		Возврат;
	КонецЕсли;
	
	
	ДополнительныеПараметры.Вставить("Файл", Результат[0]);
	
	ВыполнитьЗапросЗавершениеПодготовительныхДействий(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершениеЧтенияФайловМультипартВоВременноеХранилище(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поместить файлы тела во временное хранилище");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Файл", Результат);
	
	ВыполнитьЗапросЗавершениеПодготовительныхДействий(ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокИспользованныхРанееЗаголовков(Заголовки)
	Для Каждого КлючЗначение Из Заголовки Цикл
		Если СписокИспользованныхЗаголовков.НайтиПоЗначению(КлючЗначение.Ключ) = Неопределено Тогда
			СписокИспользованныхЗаголовков.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьЛогЗапроса(СтрокаДереваЗапросов, АдресСервера, Протокол, HTTPЗапрос, HTTPОтвет, ДатаНачала,
	Длительность)

		//	Если HTTPОтвет = Неопределено Тогда 
	//		Ошибка = Истина;
	//	Иначе 
	//		Ошибка=Не ПроверитьУспешностьВыполненияЗапроса(HTTPОтвет);//.КодСостояния<>КодУспешногоЗапроса;
	//	КонецЕсли;
	ЗаписьЛога = СтрокаДереваЗапросов.ИсторияЗапросов.Добавить();
	ЗаписьЛога.URLЗапроса = СтрокаДереваЗапросов.URLЗапроса;

	ЗаписьЛога.HTTPФункция = СтрокаДереваЗапросов.ЗапросHTTP;
	ЗаписьЛога.АдресСервера = АдресСервера;
	ЗаписьЛога.Дата = ДатаНачала;
	ЗаписьЛога.ДлительностьВыполнения = Длительность;
	ЗаписьЛога.Запрос = HTTPЗапрос.АдресРесурса;
	ЗаписьЛога.ЗаголовкиЗапроса = УИ_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуЗаголовковHTTP(HTTPЗапрос.Заголовки);
	ЗаписьЛога.BOM = СтрокаДереваЗапросов.ИспользоватьBOM;
	ЗаписьЛога.КодировкаТелаЗапроса = СтрокаДереваЗапросов.КодировкаТела;
	ЗаписьЛога.ВидТелаЗапроса = СтрокаДереваЗапросов.ВидТела;
	ЗаписьЛога.Таймаут = СтрокаДереваЗапросов.Таймаут;

	Если СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.Строка Тогда
		ЗаписьЛога.ТелоЗапросаСтрока = HTTPЗапрос.ПолучитьТелоКакСтроку();
	ИначеЕсли СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.Файл Тогда
		ЗаписьЛога.ТелоЗапросаИмяФайла = СтрокаДереваЗапросов.ИмяФайлаТела;
	ИначеЕсли СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.БезТела Тогда
	Иначе
		ДвоичныеДанныеТела = HTTPЗапрос.ПолучитьТелоКакДвоичныеДанные();
		ЗаписьЛога.ТелоЗапросаАдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеТела,
																				  УникальныйИдентификатор);
		ЗаписьЛога.ТелоЗапросаДвоичныеДанныеСтрокой = Строка(ДвоичныеДанныеТела);
	КонецЕсли;

	ЗаписьЛога.Протокол = Протокол;

	// Прокси
	ЗаписьЛога.ИспользоватьПрокси = СтрокаДереваЗапросов.ИспользоватьПрокси;
	ЗаписьЛога.ПроксиСервер = СтрокаДереваЗапросов.ПроксиСервер;
	ЗаписьЛога.ПроксиПорт = СтрокаДереваЗапросов.ПроксиПорт;
	ЗаписьЛога.ПроксиПользователь = СтрокаДереваЗапросов.ПроксиПользователь;
	ЗаписьЛога.ПроксиПароль = СтрокаДереваЗапросов.ПроксиПароль;
	ЗаписьЛога.ПроксиАутентификацияОС = СтрокаДереваЗапросов.ПроксиАутентификацияОС;

	ЗаписьЛога.КодСостояния = ?(HTTPОтвет = Неопределено, 500, HTTPОтвет.КодСостояния);

	Если HTTPОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаписьЛога.ЗаголовкиОтвета = УИ_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуЗаголовковHTTP(HTTPОтвет.Заголовки);

	СтрокаТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если ЗначениеЗаполнено(СтрокаТелоОтвета) Тогда
		Если НайтиНедопустимыеСимволыXML(СтрокаТелоОтвета) = 0 Тогда
			ЗаписьЛога.АдресТелаОтветаСтрокой = ПоместитьВоВременноеХранилище(СтрокаТелоОтвета,
				УникальныйИдентификатор);
		Иначе
			ЗаписьЛога.АдресТелаОтветаСтрокой = ПоместитьВоВременноеХранилище("Содержит недопустимые символы XML",
				УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	ДвоичныеДанныеОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанныеОтвета <> Неопределено Тогда
		ЗаписьЛога.ТелоОтветаАдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОтвета,
			УникальныйИдентификатор);
		ЗаписьЛога.ТелоОтветаДвоичныеДанныеСтрокой = Строка(ДвоичныеДанныеОтвета);
	КонецЕсли;

	ИмяФайлаОтвета = HTTPОтвет.ПолучитьИмяФайлаТела();
	Если ИмяФайлаОтвета <> Неопределено Тогда
		Файл = Новый Файл(ИмяФайлаОтвета);
		Если Файл.Существует() Тогда
			ДвоичныеДанныеОтвета = Новый ДвоичныеДанные(ИмяФайлаОтвета);
			ЗаписьЛога.ТелоОтветаАдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОтвета,
				УникальныйИдентификатор);
			ЗаписьЛога.ТелоОтветаДвоичныеДанныеСтрокой = Строка(ДвоичныеДанныеОтвета);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДереваЗапросов.ИсторияЗапросов.Сортировать("Дата Убыв");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРезультатЗапросаПоЗаписиИстории(Форма, СтрокаДереваЗапросов, СтрокаИсторииЗапросов = Неопределено)
	Если СтрокаИсторииЗапросов = Неопределено Тогда
		Форма.КодСостояния = 0;
		Форма.ЗаголовкиОтвета = "";
		Форма.ТелоОтветаСтрокой = "";
		Форма.ДлительностьВМилисекундах = 0;
		Форма.ТелоОтветаДвоичныеДанныеСтрокой = "";
		Форма.ТелоОтветаАдресДвоичныхДанных = "";

		Возврат;
	КонецЕсли;

	Форма.КодСостояния = СтрокаИсторииЗапросов.КодСостояния;
	Форма.ЗаголовкиОтвета = СтрокаИсторииЗапросов.ЗаголовкиОтвета;
	Если ЭтоАдресВременногоХранилища(СтрокаИсторииЗапросов.АдресТелаОтветаСтрокой) Тогда
		Форма.ТелоОтветаСтрокой = ПолучитьИзВременногоХранилища(СтрокаИсторииЗапросов.АдресТелаОтветаСтрокой);
	Иначе
		Форма.ТелоОтветаСтрокой = "";
	КонецЕсли;
	Форма.ДлительностьВМилисекундах = СтрокаИсторииЗапросов.ДлительностьВыполнения;
	Форма.КодСостояния = СтрокаИсторииЗапросов.КодСостояния;
	Форма.ТелоОтветаДвоичныеДанныеСтрокой = СтрокаИсторииЗапросов.ТелоОтветаДвоичныеДанныеСтрокой;
	Форма.ТелоОтветаАдресДвоичныхДанных = СтрокаИсторииЗапросов.ТелоОтветаАдресДвоичныхДанных;
КонецПроцедуры

#КонецОбласти

#Область СписокЗапросов

&НаКлиенте 
Процедура СохранитьДанныеЗапросаВДеревоЗапросов()
	Если УИ_ИдентификаторТекущейСтрокиЗапросов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ДеревоЗапросов.НайтиПоИдентификатору(УИ_ИдентификаторТекущейСтрокиЗапросов);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//Заголовки 
	ТекДанные.Заголовки.Очистить();
	Если РедактированиеЗаголовковТаблицей Тогда
		Для Каждого СтрокаЗаголовка Из ТаблицаЗаголовковЗапроса Цикл
			НоваяСтрока = ТекДанные.Заголовки.Добавить();
			НоваяСтрока.Ключ = СтрокаЗаголовка.Ключ;
			НоваяСтрока.Значение = СтрокаЗаголовка.Значение;
			НоваяСтрока.Использование = СтрокаЗаголовка.Использование;
		КонецЦикла;
	Иначе
		Заголовки = УИ_ОбщегоНазначенияКлиентСервер.ЗаголовкиHTTPЗапросаИзСтроки(ЗаголовкиСтрока);
		Для Каждого КлючЗначение ИЗ Заголовки Цикл
			НоваяСтрока = ТекДанные.Заголовки.Добавить();
			НоваяСтрока.Ключ = КлючЗначение.Ключ;
			НоваяСтрока.Значение = КлючЗначение.Значение;
			НоваяСтрока.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
		

//	ТекДанные.Текст = УИ_РедакторКодаКлиент.ТекстКодаРедактора(ЭтотОбъект, "Код");
//	ТекДанные.ИспользоватьОбработкуДляВыполненияКода = УИ_РедакторКодаКлиент.РежимИспользованияОбработкиДляВыполненияКодаРедактора(ЭтотОбъект,
//																																   "Код");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьДанныеЗапросаИзСтрокиДерева()
	СтрокаДерева = ТекущаяСтрокаЗапросов();
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Заголовки 
	ТаблицаЗаголовковЗапроса.Очистить();
	ЗаголовкиСтрока = "";
	Если РедактированиеЗаголовковТаблицей Тогда
		Для Каждого Стр Из СтрокаДерева.Заголовки Цикл
			НоваяСтрока = ТаблицаЗаголовковЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЦикла;
	Иначе
		ЗаголовкиСтрока = СтрокаЗаголовковПоТаблице(СтрокаДерева.Заголовки);
	КонецЕсли;
	
	ТелоЗапросаДвоичныеДанныеСтрокой = "";
	Если СтрокаДерева.ТелоДвоичныеДанные <> Неопределено Тогда
		ХранилищеДвоичныхДанных = СтрокаДерева.ТелоДвоичныеДанные; //см. УИ_ОбщегоНазначенияКлиентСервер.НовыйХранилищеЗначенияТипаДвоичныеДанные
		ТелоЗапросаДвоичныеДанныеСтрокой = ХранилищеДвоичныхДанных.Представление;
	КонецЕсли;

	ПриИзмененииВидаТелаЗапроса();
	ПриИзмененииВидаАутентификацииЗапроса();

	Если СтрокаДерева.ИсторияЗапросов.Количество() > 0 Тогда
		ЗаполнитьРезультатЗапросаПоЗаписиИстории(ЭтотОбъект,
												 СтрокаДерева,
												 СтрокаДерева.ИсторияЗапросов[0]);
	Иначе
		ЗаполнитьРезультатЗапросаПоЗаписиИстории(ЭтотОбъект,
												 СтрокаДерева,
												 Неопределено);
		
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область ПодготовкаЗапроса

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТаблицуЗаголовковПоСтроке(СтрокаЗаголовков, ТаблицаЗаголовковЗапроса)
	ТаблицаЗаголовковЗапроса.Очистить();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаЗаголовков);
	Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ЗаголовокСтр = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);

		Если Не ЗначениеЗаполнено(ЗаголовокСтр) Тогда
			Продолжить;
		КонецЕсли;

		МассивЗаголовка = СтрРазделить(ЗаголовокСтр, ":");
		Если МассивЗаголовка.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;

		НС = ТаблицаЗаголовковЗапроса.Добавить();
		НС.Ключ = МассивЗаголовка[0];
		НС.Значение = МассивЗаголовка[1];
		НС.Использование = Истина;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуРедактированияЗаголовковЗапроса()
	Если РедактированиеЗаголовковТаблицей Тогда
		НоваяСтраница = Элементы.ГруппаСтраницаРедактированияЗаголовковЗапросаТаблицей;
	Иначе
		НоваяСтраница = Элементы.ГруппаСтраницаРедактированияЗаголовковЗапросаТекстом;
	КонецЕсли;

	Элементы.ГруппаСраницыРедактированияЗаголовковЗапроса.ТекущаяСтраница = НоваяСтраница;

	//Теперь нужно заполнить заголовки на новой странице по старой странице
	Если РедактированиеЗаголовковТаблицей Тогда
		ЗаполнитьТаблицуЗаголовковПоСтроке(ЗаголовкиСтрока, ТаблицаЗаголовковЗапроса);
	Иначе
		ЗаголовкиСтрока = СтрокаЗаголовковПоТаблице(ТаблицаЗаголовковЗапроса);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПараметровURLПоСтроке(СтрокаПараметров)
//	ЗаголовкиПоСтроке = УИ_ОбщегоНазначенияКлиентСервер.ЗаголовкиHTTPЗапросаИзСтроки(СтрокаПараметров);
//
//	ПараметрыURL.Очистить();
//
//	Для Каждого КлючЗначение Из ЗаголовкиПоСтроке Цикл
//		НС = ПараметрыURL.Добавить();
//		НС.Имя = КлючЗначение.Ключ;
//		НС.Значение = КлючЗначение.Значение;
//		НС.Использование = Истина;
//	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПараметровURLИзТаблицы(ТаблицаПараметровURL)
	СтрокиВозврата = Новый Массив;
	
	Для Каждого Стр Из ТаблицаПараметровURL Цикл
		Если Не Стр.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиВозврата.Добавить(Стр.Имя+":"+Стр.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиВозврата,Символы.ПС);
КонецФункции

&НаКлиенте
Процедура УстановитьСтраницуРедактированияПараметровURLЗапроса()
//	Если РедактированиеПараметровURLТаблицей Тогда
//		НоваяСтраница = Элементы.ГруппаСтраницаРедактированияПараметровURLЗапросаТаблицей;
//	Иначе
//		НоваяСтраница = Элементы.ГруппаСтраницаРедактированияПараметровURLЗапросаСтрокой;
//	КонецЕсли;
//
//	Элементы.ГруппаСтраницыРедактированияПараметровURLЗапроса.ТекущаяСтраница = НоваяСтраница;
//
//	//Теперь нужно заполнить заголовки на новой странице по старой странице
//	Если РедактированиеПараметровURLТаблицей Тогда
//		ЗаполнитьТаблицуПараметровURLПоСтроке(ПараметрыURLСтрока);
//	Иначе
//		ПараметрыURLСтрока = СтрокаПараметровURLИзТаблицы(ПараметрыURL);
//	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ИсполнениеЗапроса

&НаСервере
Процедура ВыполнитьЗапросНаСервере(ИдентификаторСтрокиДерева, ДанныеФайлаТела = Неопределено)
	СтрокаДерева = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураURL = УИ_КоннекторHTTP.РазобратьURL(СтрокаДерева.URLЗапроса);

	СоединениеHTTP = ПодготовленноеСоединение(СтрокаДерева, СтруктураURL);

	НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запрос = ПодготовленныйЗапросHTTP(СтрокаДерева, СтруктураURL, ДанныеФайлаТела);
	ДатаНачала = ТекущаяДатаСеанса();
	Попытка
		Если СтрокаДерева.ЗапросHTTP = ВидыHTTPМетодов.GET Тогда
			Ответ = СоединениеHTTP.Получить(Запрос);
		ИначеЕсли СтрокаДерева.ЗапросHTTP = ВидыHTTPМетодов.POST Тогда
			Ответ = СоединениеHTTP.ОтправитьДляОбработки(Запрос);
		ИначеЕсли СтрокаДерева.ЗапросHTTP = ВидыHTTPМетодов.DELETE Тогда
			Ответ = СоединениеHTTP.Удалить(Запрос);
		ИначеЕсли СтрокаДерева.ЗапросHTTP = ВидыHTTPМетодов.PUT Тогда
			Ответ = СоединениеHTTP.Записать(Запрос);
		ИначеЕсли СтрокаДерева.ЗапросHTTP = ВидыHTTPМетодов.PATCH Тогда
			Ответ = СоединениеHTTP.Изменить(Запрос);
		Иначе
			Ответ = СоединениеHTTP.ВызватьHTTPМетод(СтрокаДерева.ЗапросHTTP, Запрос);
		КонецЕсли;
	Исключение
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ДлительностьВМилисекундах = ОкончаниеВыполнения - НачалоВыполнения;

	ЗафиксироватьЛогЗапроса(СтрокаДерева, СтруктураURL.Сервер, СтруктураURL.Схема, Запрос, Ответ, ДатаНачала,
		ДлительностьВМилисекундах);

	ЗаполнитьРезультатЗапросаПоЗаписиИстории(ЭтотОбъект,
											 СтрокаДерева,
											 СтрокаДерева.ИсторияЗапросов[0]);

	ДополнитьСписокИспользованныхРанееЗаголовков(Запрос.Заголовки);
	
	ИмяФайлаТела = Запрос.ПолучитьИмяФайлаТела();
	Если ИмяФайлаТела <> Неопределено Тогда
		//@skip-check empty-except-statement
		Попытка
			УдалитьФайлы(ИмяФайлаТела);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если ДанныеФайлаТела <> Неопределено Тогда
		Если ТипЗнч(ДанныеФайлаТела) = Тип("Структура") Тогда
		//@skip-check empty-except-statement
			Попытка
				УдалитьИзВременногоХранилища(ДанныеФайлаТела.Хранение);
			Исключение
			КонецПопытки;
		ИначеЕсли ТипЗнч(ДанныеФайлаТела) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначение Из ДанныеФайлаТела Цикл
			//@skip-check empty-except-statement
				Попытка
					УдалитьИзВременногоХранилища(КлючЗначение.Значение);
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодготовленноеСоединение(СтрокаДереваЗапросов, СтруктураURL)
	Порт = Неопределено;
	Если ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		Порт = СтруктураURL.Порт;
	КонецЕсли;
	Если СтрокаДереваЗапросов.ИспользоватьПрокси Тогда
		НастройкаПрокси = Новый ИнтернетПрокси(Истина);
		НастройкаПрокси.Установить(СтруктураURL.Схема,
								   СтрокаДереваЗапросов.ПроксиСервер,
								   СтрокаДереваЗапросов.ПроксиПорт,
								   СтрокаДереваЗапросов.ПроксиПользователь,
								   СтрокаДереваЗапросов.ПроксиПароль,
								   СтрокаДереваЗапросов.ПроксиАутентификацияОС);
	Иначе
		НастройкаПрокси = Неопределено;
	КонецЕсли;

	ИспользоватьNTMLАутентификацию = Неопределено;
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше("8.3.7") Тогда
		Если СтрокаДереваЗапросов.АутентификацияИспользовать
			 И СтрокаДереваЗапросов.АутентификацияВид = ВидыАутентификации().NTML Тогда
			ИспользоватьNTMLАутентификацию = Истина;
		КонецЕсли;
	КонецЕсли;

	ЗащищенноеСоединение = Неопределено;
	Если НРег(СтруктураURL.Схема) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;

	Если ИспользоватьNTMLАутентификацию = Неопределено Тогда
		СоединениеHTTP = Новый HTTPСоединение(СтруктураURL.Сервер, Порт, , , НастройкаПрокси,
			СтрокаДереваЗапросов.Таймаут, ЗащищенноеСоединение);
	Иначе
		СоединениеHTTP = Новый HTTPСоединение(СтруктураURL.Сервер, Порт, , , НастройкаПрокси,
			СтрокаДереваЗапросов.Таймаут, ЗащищенноеСоединение, ИспользоватьNTMLАутентификацию);
	КонецЕсли;

	Возврат СоединениеHTTP;
КонецФункции

&НаСервере
Функция ПодготовленныйЗапросHTTP(СтрокаДереваЗапросов, СтруктураURL, ДанныеФайлаТела)
	НовыйЗапрос = Новый HTTPЗапрос;
	Заголовки = Новый Соответствие;

	СтрокаЗапроса = СтруктураURL.Путь;

	СтрокаПараметров = "";
	Для Каждого КлючЗначение Из СтруктураURL.ПараметрыЗапроса Цикл
		СтрокаПараметров = СтрокаПараметров
						   + ?(Не ЗначениеЗаполнено(СтрокаПараметров), "?", "&")
						   + КлючЗначение.Ключ
						   + "="
						   + КлючЗначение.Значение;
	КонецЦикла;

	НовыйЗапрос.АдресРесурса = СтрокаЗапроса + СтрокаПараметров;
	Если СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.БезТела Тогда
		//Ничего не делаем. тела нету
	ИначеЕсли СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.Строка Тогда
		Если ЗначениеЗаполнено(СтрокаДереваЗапросов.ТелоСтрокой) Тогда
			Если СтрокаДереваЗапросов.ИспользоватьBOM = 0 Тогда
				БОМ = ИспользованиеByteOrderMark.Авто;
			ИначеЕсли (СтрокаДереваЗапросов.ИспользоватьBOM = 1) Тогда
				БОМ = ИспользованиеByteOrderMark.Использовать;
			Иначе
				БОМ = ИспользованиеByteOrderMark.НеИспользовать;
			КонецЕсли;

			Если СтрокаДереваЗапросов.КодировкаТела = "Авто" Тогда
				НовыйЗапрос.УстановитьТелоИзСтроки(СтрокаДереваЗапросов.ТелоСтрокой, , БОМ);
			Иначе
				Попытка
					КодировкаТела = КодировкаТекста[СтрокаДереваЗапросов.КодировкаТела];
				Исключение
					КодировкаТела = СтрокаДереваЗапросов.КодировкаТела;
				КонецПопытки;
				НовыйЗапрос.УстановитьТелоИзСтроки(СтрокаДереваЗапросов.ТелоСтрокой,
												  КодировкаТела,
												   БОМ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.ДвоичныеДанные Тогда
		Если СтрокаДереваЗапросов.ТелоДвоичныеДанные <> Неопределено Тогда
			ДвоичныеДанныеТела = УИ_ОбщегоНазначения.ЗначениеИзХранилищаКонтейнераДвоичныхДанных(СтрокаДереваЗапросов.ТелоДвоичныеДанные);
			Если ТипЗнч(ДвоичныеДанныеТела) = Тип("ДвоичныеДанные") Тогда
				НовыйЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТела);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДереваЗапросов.ВидТела = ВидыТелаЗапроса.МультипартФорм Тогда
		ВидыЭлементовМультипарт = ВидыЭлементовМультипарт();

		ФайлыДляОбъединения = Новый Массив;
		Для ИндексСтроки = 0 По СтрокаДереваЗапросов.ТелоМультипарт.Количество() - 1 Цикл
			СтрокаЭлементаМультипарт = СтрокаДереваЗапросов.ТелоМультипарт[ИндексСтроки];
			Если Не СтрокаЭлементаМультипарт.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЭлементаМультипарт.Вид = ВидыЭлементовМультипарт.Строка Тогда
				ПотокЗаписи = Новый ПотокВПамяти;

				ВходнойФайл = Новый ЗаписьТекста(ПотокЗаписи, КодировкаТекста.ANSI, Символы.ПС);
				ВходнойФайл.ЗаписатьСтроку("");
				ВходнойФайл.ЗаписатьСтроку("--" + РазделительТелаМультипарт);
				ВходнойФайл.ЗаписатьСтроку("Content-Disposition: form-data;name="""
										   + СтрокаЭлементаМультипарт.Имя
										   + """");
				ВходнойФайл.ЗаписатьСтроку("");
				ВходнойФайл.Закрыть();
				ФайлыДляОбъединения.Добавить(ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные());

				ФайлыДляОбъединения.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СтрокаЭлементаМультипарт.Значение));

			ИначеЕсли СтрокаЭлементаМультипарт.Вид = ВидыЭлементовМультипарт.Файл Тогда
				Если Не ЗначениеЗаполнено(СтрокаЭлементаМультипарт.Значение) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаИмениКонтента = "Content-Disposition: form-data;name=""" + СтрокаЭлементаМультипарт.Имя + """; filename=""file""
																												|Content-Type: application/octet-stream";

				АдресДвоичныхДанных = ДанныеФайлаТела[ИндексСтроки];
				Если АдресДвоичныхДанных = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЭтоАдресВременногоХранилища(АдресДвоичныхДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				Файл = Новый Файл(СтрокаЭлементаМультипарт.Значение);

				ПотокЗаписи = Новый ПотокВПамяти;

				ВходнойФайл = Новый ЗаписьТекста(ПотокЗаписи, КодировкаТекста.ANSI, Символы.ПС);
				ВходнойФайл.ЗаписатьСтроку("");
				ВходнойФайл.ЗаписатьСтроку("--" + РазделительТелаМультипарт);
				ВходнойФайл.ЗаписатьСтроку("Content-Disposition: form-data;name="""
										   + СтрокаЭлементаМультипарт.Имя
										   + """;filename="""
										   + Файл.Имя
										   + """");
				ВходнойФайл.ЗаписатьСтроку("Content-Type: application/octet-stream");  //octet-stream
				ВходнойФайл.ЗаписатьСтроку("");
				ВходнойФайл.Закрыть();
				ФайлыДляОбъединения.Добавить(ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные());

				ФайлыДляОбъединения.Добавить(ПолучитьИзВременногоХранилища(АдресДвоичныхДанных));
			КонецЕсли;
				
		КонецЦикла;

		ПотокЗаписи = Новый ПотокВПамяти;

		ВходнойФайл = Новый ЗаписьТекста(ПотокЗаписи, КодировкаТекста.ANSI, Символы.ПС);
		ВходнойФайл.ЗаписатьСтроку("");
		ВходнойФайл.ЗаписатьСтроку("--" + РазделительТелаМультипарт + "--");
		ВходнойФайл.Закрыть();

		ФайлыДляОбъединения.Добавить(ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные());

		ФинальныеДД = СоединитьДвоичныеДанные(ФайлыДляОбъединения);

		РазмерФайлаОтправки = XMLСтрока(ФинальныеДД.Размер());
		НовыйЗапрос.УстановитьТелоИзДвоичныхДанных(ФинальныеДД);
		
		Заголовки.Вставить("Content-Length", РазмерФайлаОтправки);		
	Иначе
		ДвоичныеДанныеТела = ПолучитьИзВременногоХранилища(ДанныеФайлаТела.Хранение);
		Если ТипЗнч(ДвоичныеДанныеТела) = Тип("ДвоичныеДанные") Тогда
			Файл = Новый Файл(СтрокаДереваЗапросов.ИмяФайлаТела);
			//@skip-check missing-temporary-file-deletion
			ВременныйФайл = ПолучитьИмяВременногоФайла(Файл.Расширение);
			ДвоичныеДанныеТела.Записать(ВременныйФайл);

			НовыйЗапрос.УстановитьИмяФайлаТела(ВременныйФайл);
					
			Заголовки.Вставить("Content-Length",Формат(ДвоичныеДанныеТела.Размер(), "ЧГ=0;"));
			
		КонецЕсли;
	КонецЕсли;

	//Теперь нужно установить заголовки запроса

	Для Каждого СтрокаЗаголовка Из СтрокаДереваЗапросов.Заголовки Цикл
		Если Не СтрокаЗаголовка.Использование Тогда
			Продолжить;
		КонецЕсли;
		Заголовки.Вставить(СтрокаЗаголовка.Ключ, СтрокаЗаголовка.Значение);
	КонецЦикла;

	НовыйЗапрос.Заголовки = Заголовки;
	УстановитьЗаголовокАутентификацииВЗапросHTTP(СтрокаДереваЗапросов, НовыйЗапрос);
	
	Возврат НовыйЗапрос;
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокАутентификацииВЗапросHTTP(СтрокаДереваЗапросов, Запрос)
	Виды = ВидыАутентификации();
	Если Не ЗначениеЗаполнено(СтрокаДереваЗапросов.АутентификацияВид)
		 Или СтрокаДереваЗапросов.АутентификацияВид = Виды.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаДереваЗапросов.АутентификацияИспользовать Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЗаголовка = "Authorization";
	Если Запрос.Заголовки.Получить(ИмяЗаголовка) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЗаголовка = "";
	
	Если СтрокаДереваЗапросов.АутентификацияВид = Виды.Базовая Тогда
		Префикс = "Basic";

		ЗначениеЗаголовка = Префикс
							+ " "
							+ Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДереваЗапросов.АутентификацияПользователь
																		  + ":"
																		  + СтрокаДереваЗапросов.АутентификацияПароль));

	ИначеЕсли СтрокаДереваЗапросов.АутентификацияВид = Виды.BearerToken Тогда 
		Префикс = СокрЛП(СтрокаДереваЗапросов.АутентификацияПрефиксТокена);
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			Префикс = "Bearer";
		КонецЕсли;
		ЗначениеЗаголовка = Префикс +" "+ СтрокаДереваЗапросов.АутентификацияПароль;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Заголовки.Вставить(ИмяЗаголовка, ЗначениеЗаголовка);
КонецПроцедуры

#КонецОбласти

#Область РезультатЗапроса

#КонецОбласти

#Область Общее

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЗаголовковПоТаблице(ТаблицаЗаголовков)
	МассивСтрокЗаголовков = Новый Массив;
	Для Каждого Стр Из ТаблицаЗаголовков Цикл
		Если Не Стр.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрокЗаголовков.Добавить(Стр.Ключ + ":" + Стр.Значение);
	КонецЦикла;

	Возврат СтрСоединить(МассивСтрокЗаголовков, Символы.ПС);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыКодировокТелаЗапроса()
	Виды = Новый Структура;
	Виды.Вставить("Авто", "Авто");
	Виды.Вставить("Системная", "Системная");
	Виды.Вставить("ANSI", "ANSI");
	Виды.Вставить("OEM", "OEM");
	Виды.Вставить("UTF8", "UTF8");
	Виды.Вставить("UTF16", "UTF16");
	
	
	Возврат Виды;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораКодировкиТекста()
	Элементы.КодировкаТелаЗапроса.СписокВыбора.Очистить();

	Виды = ВидыКодировокТелаЗапроса();
	Для Каждого КлючЗначение ИЗ Виды Цикл
		Элементы.КодировкаТелаЗапроса.СписокВыбора.Добавить(КлючЗначение.Значение);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	РазделительТелаМультипарт = "X-TOOLS-UI-1C-BOUNDARY";
	
	ЗаполнитьСписокВыбораКодировкиТекста();
	
	Элементы.ВидТелаЗапроса.СписокВыбора.Очистить();
	ВидыТелаЗапроса = ВидыТелаЗапроса();
	Элементы.ВидТелаЗапроса.СписокВыбора.Добавить(ВидыТелаЗапроса.БезТела, "Без тела");
	Элементы.ВидТелаЗапроса.СписокВыбора.Добавить(ВидыТелаЗапроса.Строка);
	Элементы.ВидТелаЗапроса.СписокВыбора.Добавить(ВидыТелаЗапроса.ДвоичныеДанные, "Двоичные данные");
	Элементы.ВидТелаЗапроса.СписокВыбора.Добавить(ВидыТелаЗапроса.Файл);
	Элементы.ВидТелаЗапроса.СписокВыбора.Добавить(ВидыТелаЗапроса.МультипартФорм, "Multipart form");

	ВидыHTTPМетодов = ВидыHTTPМетодов();
	Элементы.ЗапросHTTP.СписокВыбора.Очистить();
	Для Каждого КлючЗначение Из ВидыHTTPМетодов Цикл
		Элементы.ЗапросHTTP.СписокВыбора.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
	ВидыСтроковогоСодержимогоТела = ТипыТекстовогоСодержимого();
	Элементы.ДеревоЗапросовТипСтроковогоСодержимого.СписокВыбора.Очистить();
	Элементы.ДеревоЗапросовТипСтроковогоСодержимого.СписокВыбора.Добавить("Нет");
	Для Каждого КлючЗначение Из ВидыСтроковогоСодержимогоТела Цикл
		Элементы.ДеревоЗапросовТипСтроковогоСодержимого.СписокВыбора.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Элементы.ДеревоЗапросовАутентификацияВид.СписокВыбора.Очистить();
	
	ВидыАутентификации = ВидыАутентификации();
	Элементы.ДеревоЗапросовАутентификацияВид.СписокВыбора.Добавить(ВидыАутентификации.Нет);
	Элементы.ДеревоЗапросовАутентификацияВид.СписокВыбора.Добавить(ВидыАутентификации.Базовая, "Базовая(Логин,Пароль)");
	Элементы.ДеревоЗапросовАутентификацияВид.СписокВыбора.Добавить(ВидыАутентификации.BearerToken, "Bearer Токен");
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше("8.3.7") Тогда
		Элементы.ДеревоЗапросовАутентификацияВид.СписокВыбора.Добавить(ВидыАутентификации.NTML, "NTML (аутентифкация ОС)");
	КонецЕсли;
	
	Элементы.ДеревоЗапросовТелоМультипартВид.СписокВыбора.Очистить();
	
	ВидыЭлементовТелаМультипарт = ВидыЭлементовМультипарт();
	Элементы.ДеревоЗапросовТелоМультипартВид.СписокВыбора.Добавить(ВидыЭлементовТелаМультипарт.Строка);
	Элементы.ДеревоЗапросовТелоМультипартВид.СписокВыбора.Добавить(ВидыЭлементовТелаМультипарт.Файл);
		
	ИнициализироватьДеревоЗапросов();	

КонецПроцедуры


&НаСервере
Процедура ИнициализироватьДеревоЗапросов()
	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	ИнициализироватьСтрокуДереваЗапросов(НоваяСтрока, ЭтотОбъект);
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСтрокуДереваЗапросов(СтрокаДереваЗапросов, Форма)
	СтрокаДереваЗапросов.ЗапросHTTP = Форма.ВидыHTTPМетодов.GET;
	СтрокаДереваЗапросов.ВидТела = Форма.ВидыТелаЗапроса.БезТела;
	
	ВидыКодировокТелаЗапроса = ВидыКодировокТелаЗапроса();
	СтрокаДереваЗапросов.КодировкаТела = ВидыКодировокТелаЗапроса.Авто;
	
	СтрокаДереваЗапросов.Таймаут = 30;
	СтрокаДереваЗапросов.ТипСтроковогоСодержимого = "Нет";
	
	Если Не ЗначениеЗаполнено(СтрокаДереваЗапросов.Имя) Тогда
		СтрокаДереваЗапросов.Имя = "Запрос" + Формат(СтрокаДереваЗапросов.ПолучитьИдентификатор(), "ЧГ=0;");
	КонецЕсли;
	
	ВидыАутентификации = ВидыАутентификации();
	СтрокаДереваЗапросов.АутентификацияВид = ВидыАутентификации.Нет;
	
КонецПроцедуры



// Обновить заголовок формы.
&НаКлиенте
Процедура ОбновитьЗаголовок()

	Заголовок = НачальныйЗаголовок + ?(ИмяФайлаЗапросов <> "", ": " + ИмяФайлаЗапросов, "");

КонецПроцедуры


#КонецОбласти


&НаСервере
Процедура ЗаполнитьДвоичныеДанныеТелаИзФайлаЗавершениеНаСервере(Адрес, ИдентификаторСтроки)
	ТекДанные = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);

	ТекДанные.ТелоДвоичныеДанные = УИ_ОбщегоНазначения.ЗначениеХранилищаКонтейнераДвочныхДанных(ДвоичныеДанные);
	
	ТелоЗапросаДвоичныеДанныеСтрокой = ТекДанные.ТелоДвоичныеДанные.Представление;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДвоичныеДанныеТелаИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьДвоичныеДанныеТелаИзФайлаЗавершениеНаСервере(Адрес, ДополнительныеПараметры.ИдентификаторТекущейСтроки);

КонецПроцедуры

// Имя файла тела запроса начало выбора завершение.
// 
// Параметры:
//  ВыбранныеФайлы -Массив из Строка-Выбранные файлы
//  ДополнительныеПараметры - Структура:
//  * ИдентификаторСтроки -Число
&НаКлиенте
Процедура ИмяФайлаТелаЗапросаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаЗапросов = ДеревоЗапросов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Если СтрокаЗапросов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаЗапросов.ИмяФайлаТела = ВыбранныеФайлы[0];
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОтладки(АдресДанныхОтладки)
	ДанныеДляОтладки = ПолучитьИзВременногоХранилища(АдресДанныхОтладки);

	URLЗапроса = "";
	Если Не ЗначениеЗаполнено(ДанныеДляОтладки.Протокол) Тогда
		URLЗапроса = "http";
	Иначе
		URLЗапроса = ДанныеДляОтладки.Протокол;
	КонецЕсли;

	URLЗапроса = URLЗапроса + "://" + ДанныеДляОтладки.АдресСервера;

	Если ЗначениеЗаполнено(ДанныеДляОтладки.Порт) Тогда
		URLЗапроса = URLЗапроса + ":" + Формат(ДанныеДляОтладки.Порт, "ЧГ=0;");
	КонецЕсли;

	Если Не СтрНачинаетсяС(ДанныеДляОтладки.Запрос, "/") Тогда
		URLЗапроса = URLЗапроса + "/";
	КонецЕсли;

	URLЗапроса = URLЗапроса + ДанныеДляОтладки.Запрос;
	РедактированиеЗаголовковТаблицей = Истина;

	Элементы.ГруппаСраницыРедактированияЗаголовковЗапроса.ТекущаяСтраница = Элементы.ГруппаСтраницаРедактированияЗаголовковЗапросаТаблицей;

	Заголовки = ДанныеДляОтладки.Заголовки;

	//Удаляем неиспользуемые символы из строки заголовков
	ПозицияСимвола = НайтиНедопустимыеСимволыXML(Заголовки);
	Пока ПозицияСимвола > 0 Цикл
		Если ПозицияСимвола = 1 Тогда
			Заголовки = Сред(Заголовки, 2);
		ИначеЕсли ПозицияСимвола = СтрДлина(Заголовки) Тогда
			Заголовки = Лев(Заголовки, СтрДлина(Заголовки) - 1);
		Иначе
			НовыеЗаголовки = Лев(Заголовки, ПозицияСимвола - 1) + Сред(Заголовки, ПозицияСимвола + 1);
			Заголовки = НовыеЗаголовки;
		КонецЕсли;

		ПозицияСимвола = НайтиНедопустимыеСимволыXML(Заголовки);
	КонецЦикла;

	ЗаполнитьТаблицуЗаголовковПоСтроке(Заголовки, ТаблицаЗаголовковЗапроса);

	Если ДанныеДляОтладки.ТелоЗапроса = Неопределено Тогда
		ТелоЗапроса = "";
	Иначе
		ТелоЗапроса = ДанныеДляОтладки.ТелоЗапроса;
	КонецЕсли;

	Если ДанныеДляОтладки.Свойство("ДвоичныеДанныеТела") Тогда
		Если ТипЗнч(ДанныеДляОтладки.ДвоичныеДанныеТела) = Тип("ДвоичныеДанные") Тогда
			АдресДвоичныхДанныхТелаЗапроса = ПоместитьВоВременноеХранилище(ДанныеДляОтладки.ДвоичныеДанныеТела,
				АдресДвоичныхДанныхТелаЗапроса);
			ТелоЗапросаДвоичныеДанныеСтрокой = ДанныеДляОтладки.ДвоичныеДанныеТелаСтрокой;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеДляОтладки.Свойство("ИмяФайлаЗапроса") Тогда
		ИмяФайлаТелаЗапроса = ДанныеДляОтладки.ИмяФайлаЗапроса;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляОтладки.ПроксиСервер) Тогда
		ИспользоватьПрокси = Истина;

		ПроксиСервер = ДанныеДляОтладки.ПроксиСервер;
		ПроксиПорт = ДанныеДляОтладки.ПроксиПорт;
		ПроксиПользователь = ДанныеДляОтладки.ПроксиПользователь;
		ПроксиПароль = ДанныеДляОтладки.ПроксиПароль;
		ПроксиАутентификацияОС = ДанныеДляОтладки.ИспользоватьАутентификациюОС;
	Иначе
		ИспользоватьПрокси = Ложь;
	КонецЕсли;
КонецПроцедуры

// Редактировать тело запроса в редакторе JSONЗавершение.
// 
// Параметры:
//  Результат - Строка, Неопределено- Результат
//  ДополнительныеПараметры - Структура:
//  * ТекущаяСтрока - Число, Неопределено -
&НаКлиенте
Процедура РедактироватьТелоЗапросаВРедактореJSONЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.ТекущаяСтрока = Неопределено Тогда
		ВозвраТ;
	КонецЕсли;
	
	СтрокаДерева = ДеревоЗапросов.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДерева.ТелоСтрокой=Результат;
	
	//ЗаполнитьСтруктуруJSONВДеревеЗапросов();
КонецПроцедуры

#КонецОбласти

