
#Область ОписаниеПеременных

&НаКлиенте
Перем УИ_РедакторКодаКлиентскиеДанные Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)


	// РедакторКода
	УИ_РедакторКодаСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	УИ_РедакторКодаСервер.СоздатьЭлементыРедактораКода(ЭтотОбъект, "Алгоритм", Элементы.ПолеТекстАлгоритма);
	// РедакторКода

КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// РедакторКода
	УИ_РедакторКодаКлиент.ФормаПриОткрытии(ЭтотОбъект, Неопределено);
   	// РедакторКода
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Отказ = Ложь;
	ЗаписатьНаКлиенте(Отказ);
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Отказ = Ложь;
	ЗаписатьНаКлиенте(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	ПрочитатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметр(Команда)
	П = Новый Структура("Ключ", Идентификатор);
	ОткрытьФорму("Справочник.УИ_Алгоритмы.Форма.ФормаПараметра", П, ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьИмя(Команда)
	Если Элементы.ТаблицаПараметров.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	П = Новый Структура("Ключ,ИмяПараметра,Переименовать", Параметры.Ключ,
		Элементы.ТаблицаПараметров.ТекущиеДанные.Параметр, Истина);
	ОткрытьФорму("Справочник.УИ_Алгоритмы.Форма.ФормаПараметра", П, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначение(Команда)
	Если Элементы.ТаблицаПараметров.ТекущиеДанные <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменениеПараметровЗавершение", ЭтотОбъект);
		П = Новый Структура;
		П.Вставить("Ключ", Параметры.Ключ);
		П.Вставить("ИмяПараметра", Элементы.ТаблицаПараметров.ТекущиеДанные.Параметр);
		П.Вставить("ТипПараметра", Элементы.ТаблицаПараметров.ТекущиеДанные.ОписаниеТипа);
		ОткрытьФорму("Справочник.УИ_Алгоритмы.Форма.ФормаПараметра", П, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПараметровПрограммныйИнтерфейс(Команда)
//	Объект.Параметры.Очистить();
//	КодАлгоритма = Объект.КодАлгоритма;
//	мИсключая = УИ_АлгоритмыКлиентСервер.МассивИсключаемыхСимволов();
//	Префикс = "Параметры.";
//	Заполнение = Новый Структура;
//	Пока Найти(КодАлгоритма, Префикс) > 0 Цикл
//		Слово = УИ_АлгоритмыКлиентСервер.ПолучитьПервоеВхождениеСловоБезПрефикса(КодАлгоритма, Префикс, мИсключая);
//		КодАлгоритма = СтрЗаменить(КодАлгоритма, Префикс + Слово, Слово);
//		Попытка
//			Заполнение.Вставить(Слово, Истина);
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	Текст = Объект.Текст;
//	Префикс = "$";
//	Пока Найти(КодАлгоритма, Префикс) > 0 Цикл
//		Слово = УИ_АлгоритмыКлиентСервер.ПолучитьПервоеВхождениеСловоБезПрефикса(Текст, Префикс, мИсключая);
//		Текст = СтрЗаменить(Текст, Префикс + Слово, Слово);
//		Попытка
//			Заполнение.Вставить(Слово, Ложь);
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//
//	АдресХранилища = УИ_АлгоритмыКлиентСервер.ПолучитьПараметры(Объект.Ссылка, Истина);
//
//	ХранимыеПараметры = ПолучитьИзВременногоХранилища(АдресХранилища);
//
//	Для Каждого ЭлементСоответствия Из Заполнение Цикл
//		НоваяСтрока = Объект.Параметры.Добавить();
//		НоваяСтрока.Вход = ЭлементСоответствия.Значение;
//		НоваяСтрока.Имя = ЭлементСоответствия.Ключ;
//		Если НоваяСтрока.Вход И ХранимыеПараметры.Свойство(ЭлементСоответствия.Ключ) Тогда
//			НоваяСтрока.ТипПараметра = ПолучитьСтрокуОписаниеТипа(ХранимыеПараметры[ЭлементСоответствия.Ключ]);
//			НоваяСтрока.ПоУмолчанию = Строка(ХранимыеПараметры[ЭлементСоответствия.Ключ]);
//		КонецЕсли;
//	КонецЦикла;
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьОбъекта

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Отказ)
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
			
	ОбработчикПередЗаписью(Отказ);
	ЗаписатьНаСервере(Отказ);
	ОбработчикПослеЗаписи(Отказ);
	
	Если Не Отказ Тогда
		Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПередЗаписью(Отказ)
	ТекстАлгоритма = УИ_РедакторКодаКлиент.ТекстКодаРедактора(ЭтотОбъект, "Алгоритм");
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеЗаписи(Отказ)
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(Отказ)
	ОбработчикПередЗаписьюНаСервере(Отказ);
	
	ОбработчикПослеЗаписиНаСервере(Отказ);
КонецПроцедуры

&НаСервере
Процедура ОбработчикПередЗаписьюНаСервере(Отказ)
КонецПроцедуры

&НаСервере
Процедура ОбработчикПослеЗаписиНаСервере(Отказ)
КонецПроцедуры


#КонецОбласти

&НаСервере
Процедура ПрочитатьНаСервере()
	
	Модифицированность = Ложь;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеРедактораДокументСформирован(Элемент)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLДокументСформирован(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеРедактораПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяИнициализацияРедакторов()
	УИ_РедакторКодаКлиент.РедакторКодаОтложеннаяИнициализацияРедакторов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяОбработкаСобытийРедактора() Экспорт
	УИ_РедакторКодаКлиент.ОтложеннаяОбработкаСобытийРедактора(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_РедакторКодаЗавершениеИнициализации() Экспорт
	УИ_РедакторКодаКлиент.УстановитьТекстРедактора(ЭтотОбъект, "Алгоритм", ТекстАлгоритма, Истина);
КонецПроцедуры


#КонецОбласти
